"use strict";
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ops = exports.ReturnTypes = exports.AllTypesProps = void 0;
exports.AllTypesProps = {
    Account: {
        virtualIbanEntries: {},
        memberships: {
            filters: 'MembershipsFilterInput',
            orderBy: 'AccountMembershipOrderByInput',
        },
        legalDocuments: {
            filters: 'LegalDocumentsFilterInput',
        },
        statements: {
            filters: 'StatementFiltersInput',
        },
        transactions: {
            orderBy: 'TransactionsOrderByInput',
            filters: 'TransactionsFiltersInput',
        },
        invoices: {},
        receivedDirectDebitMandates: {
            orderBy: 'AccountReceivedDirectDebitOrderByInput',
            filters: 'AccountReceivedDirectDebitMandateFiltersInput',
        },
        merchantProfiles: {
            orderBy: 'MerchantProfileOrderByInput',
            filters: 'MerchantProfileFiltersInput',
        },
        standingOrders: {
            orderBy: 'AccountStandingOrderOrderByInput',
            filters: 'AccountStandingOrderFiltersInput',
        },
        fundingSources: {
            orderBy: 'FundingSourceOrderByInput',
            filters: 'FundingSourceFiltersInput',
        },
        trustedBeneficiaries: {
            orderBy: 'TrustedBeneficiaryOrderByInput',
            filters: 'TrustedBeneficiaryFiltersInput',
        },
    },
    AccountCountry: 'enum',
    AccountFilterInput: {
        status: 'AccountStatus',
        paymentLevels: 'PaymentLevel',
    },
    AccountFundingLimitsReachedReason: 'enum',
    AccountHolder: {
        accounts: {
            orderBy: 'AccountOrderByInput',
        },
        supportingDocumentCollections: {},
        fundingLimitSettingsChangeRequests: {},
        externalAccounts: {},
        paymentMandates: {
            orderBy: 'PaymentMandateOrderByInput',
            filters: 'PaymentMandateFiltersInput',
        },
    },
    AccountHolderFilterInput: {
        status: 'AccountHolderStatus',
        types: 'AccountHolderType',
        verificationStatus: 'VerificationStatus',
    },
    AccountHolderOrderByFieldInput: 'enum',
    AccountHolderOrderByInput: {
        field: 'AccountHolderOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    AccountHolderStatus: 'enum',
    AccountHolderType: 'enum',
    AccountLanguage: 'enum',
    AccountMembership: {
        cards: {
            orderBy: 'CardOrderByInput',
            filters: 'CardFiltersInput',
        },
    },
    AccountMembershipOrderByFieldInput: 'enum',
    AccountMembershipOrderByInput: {
        field: 'AccountMembershipOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    AccountMembershipsFilterInput: {
        status: 'AccountMembershipStatus',
    },
    AccountMembershipsPermission: 'enum',
    AccountMembershipStatus: 'enum',
    AccountNumber: `scalar.AccountNumber`,
    AccountOrderByFieldInput: 'enum',
    AccountOrderByInput: {
        field: 'AccountOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    AccountReceivedDirectDebitMandateFiltersInput: {
        status: 'ReceivedDirectDebitMandateStatus',
        scheme: 'ReceivedDirectDebitMandateScheme',
    },
    AccountReceivedDirectDebitOrderByFieldInput: 'enum',
    AccountReceivedDirectDebitOrderByInput: {
        field: 'AccountReceivedDirectDebitOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    AccountStandingOrderFiltersInput: {
        status: 'StandingOrderStatus',
    },
    AccountStandingOrderOrderByFieldInput: 'enum',
    AccountStandingOrderOrderByInput: {
        field: 'AccountStandingOrderOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    AccountStatus: 'enum',
    AccountVerificationStatus: 'enum',
    ActivatePhysicalCardInput: {},
    AddAccountMembershipInput: {
        restrictedTo: 'RestrictedToInput',
        residencyAddress: 'ResidencyAddressInput',
    },
    AddAccountMembershipsInput: {
        memberships: 'MembershipInfoInput',
    },
    AddCardInput: {
        cardContractExpiryDate: 'DateTime',
        spendingLimit: 'SpendingLimitInput',
    },
    AddCardsInput: {
        cards: 'CardConfigInput',
    },
    AddCardsWithGroupDeliveryInput: {
        groupDeliveryAddress: 'CompleteAddressWithContactInput',
        cards: 'CardConfigWithGroupDeliveryInput',
    },
    AddDigitalCardInput: {
        walletProvider: 'WalletProviderType',
    },
    AddDirectDebitFundingSourceInput: {
        scheme: 'SEPADirectDebitScheme',
        iban: 'IBAN',
    },
    AddExternalAccountBalanceInput: {
        amount: 'AmountInput',
        type: 'ExternalAccountBalanceType',
        lastChangedAt: 'DateTime',
    },
    AddExternalAccountInput: {
        cashAccountType: 'CashAccountType',
        BIC: 'BIC',
        IBAN: 'IBAN',
        currency: 'Currency',
        country: 'CCA3',
        originalCreatedAt: 'DateTime',
        usage: 'ExternalAccountUsage',
        balances: 'ExternalAccountBalanceInput',
    },
    AddFundingLimitSettingsChangeRequestInput: {
        instantFundingLimit: 'FundingLimitAmountInput',
        fundingLimit: 'FundingLimitAmountInput',
    },
    AddInternalDirectDebitPaymentMandateInput: {
        sequence: 'InternalDirectDebitSequence',
        language: 'MandateLanguage',
        signatureDate: 'Date',
    },
    AddMerchantProfileInput: {
        productType: 'ProductType',
        expectedMonthlyPaymentVolume: 'AmountInput',
        expectedAverageBasket: 'AmountInput',
    },
    AddOrUpdateExternalAccountBalanceInput: {
        amount: 'AmountInput',
        type: 'ExternalAccountBalanceType',
        lastChangedAt: 'DateTime',
    },
    AddReceivedInternalDirectDebitB2bMandateInput: {},
    AddReceivedSepaDirectDebitB2bMandateInput: {
        sequence: 'SEPAReceivedDirectDebitMandateSequence',
        signatureDate: 'Date',
    },
    AddressInformationInput: {
        country: 'CCA3',
    },
    AddressInput: {
        country: 'CCA3',
    },
    AddSepaDirectDebitPaymentMandateInput: {
        sequence: 'DirectDebitSequence',
        language: 'MandateLanguage',
        signatureDate: 'Date',
        debtor: 'SepaPaymentMandateDebtorInput',
    },
    AddSingleUseVirtualCardInput: {
        spendingLimit: 'SpendingLimitInput',
    },
    AddSingleUseVirtualCardsInput: {
        cards: 'SingleUseVirtualCardConfigInput',
    },
    AddVirtualIbanInput: {},
    AddWebhookSubscriptionInput: {
        status: 'WebhookSubscriptionCreationStatus',
    },
    AllowSddInput: {},
    AllowSddVirtualIbanEntryInput: {},
    AmlRiskLevel: 'enum',
    AmountInput: {
        value: 'AmountValue',
        currency: 'Currency',
    },
    AmountValue: `scalar.AmountValue`,
    AuditId: `scalar.AuditId`,
    AuthenticatorType: 'enum',
    AuthorizationId: `scalar.AuthorizationId`,
    AuthorizationType: 'enum',
    BeneficiaryAccountHolderType: 'enum',
    BeneficiaryAccountStatus: 'enum',
    BeneficiaryType: 'enum',
    BeneficiaryVerificationInput: {
        iban: 'IBAN',
    },
    BIC: `scalar.BIC`,
    BindAccountMembershipInput: {},
    BusinessActivity: 'enum',
    CancelCardInput: {},
    CancelConsentInput: {},
    CancelDigitalCardInput: {},
    CanceledFundingSourceReason: 'enum',
    CancelFundingSourceInput: {},
    CancelPhysicalCardInput: {
        reason: 'CancelPhysicalCardReason',
    },
    CancelPhysicalCardReason: 'enum',
    CancelStandingOrderInput: {},
    CancelTransactionInput: {},
    CancelVirtualIbanEntryInput: {},
    CapitalDepositCaseFiltersInput: {
        status: 'CapitalDepositCaseStatus',
    },
    CapitalDepositCaseOrderByFieldInput: 'enum',
    CapitalDepositCaseOrderByInput: {
        field: 'CapitalDepositCaseOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    CapitalDepositCaseStatus: 'enum',
    CapitalDepositDocumentStatus: 'enum',
    CapitalDepositDocumentType: 'enum',
    Card: {
        digitalCards: {
            orderBy: 'DigitalCardOrderByInput',
            filters: 'DigitalCardFiltersInput',
        },
        transactions: {
            orderBy: 'TransactionsOrderByInput',
            filters: 'TransactionsFiltersInput',
        },
    },
    CardAuthorizationOutcome: 'enum',
    CardAuthorizationType: 'enum',
    CardConfigInput: {
        cardContractExpiryDate: 'DateTime',
        spendingLimit: 'SpendingLimitInput',
        physicalCard: 'PhysicalCardConfigInput',
    },
    CardConfigWithGroupDeliveryInput: {
        cardContractExpiryDate: 'DateTime',
        spendingLimit: 'SpendingLimitInput',
        physicalCardCustomOptions: 'PhysicalCardCustomOptionsForGroupDeliveryInput',
    },
    CardDesignBackgroundType: 'enum',
    CardDesignStatus: 'enum',
    CardFiltersInput: {
        status: 'CardStatus',
        statuses: 'CardStatus',
        type: 'CardType',
        types: 'CardType',
    },
    CardOrderByFieldInput: 'enum',
    CardOrderByInput: {
        field: 'CardOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    CardPaymentMethodInput: {},
    CardProductStatus: 'enum',
    CardSettingsBackgroundType: 'enum',
    CardStatus: 'enum',
    CardToken: `scalar.CardToken`,
    CardTransactionCategory: 'enum',
    CardType: 'enum',
    CashAccountType: 'enum',
    Category: 'enum',
    CCA2: `scalar.CCA2`,
    CCA3: `scalar.CCA3`,
    Certificate: {},
    CheckPaymentMethodInput: {},
    CloseAccountInput: {
        reason: 'PartnerCloseAccountReasonInput',
    },
    CloseAccountReasonType: 'enum',
    CompanyType: 'enum',
    CompleteAddressInput: {
        country: 'CCA3',
    },
    CompleteAddressWithContactInput: {
        country: 'CCA3',
        phoneNumber: 'PhoneNumber',
    },
    CompleteDigitalCardStatus: 'enum',
    ConfirmPhysicalCardRenewalInput: {
        address: 'CompleteAddressInput',
        customOptions: 'PhysicalCardCustomOptionsInput',
    },
    ConsentIdWithOrder: {},
    ConsentPurpose: 'enum',
    ConsentsFiltersInput: {},
    ConsentStatus: 'enum',
    CreateCapitalDepositCaseInput: {
        companyShareholders: 'OnboardCompanyShareholderInput',
        individualShareholders: 'OnboardIndividualShareholderInput',
        totalCapitalDepositAmount: 'AmountInput',
        onboardingCapitalDepositCompany: 'OnboardCompanyAccountHolderInput',
    },
    CreateMerchantPaymentLinkInput: {
        amount: 'AmountInput',
        redirectUrl: 'URL',
        cancelRedirectUrl: 'URL',
        billingAddress: 'AddressInput',
        expiresAt: 'DateTime',
        requestedExecutionAt: 'DateTime',
        sequence: 'PaymentMandateSequence',
        language: 'Language',
        customer: 'CustomerInput',
    },
    CreateMultiConsentInput: {
        orderedConsentIds: 'ConsentIdWithOrder',
    },
    CreditTransferInput: {
        swanAccountBeneficiary: 'SwanAccountBeneficiaryInput',
        sepaBeneficiary: 'SepaBeneficiaryInput',
        amount: 'AmountInput',
        requestedExecutionAt: 'DateTime',
        mode: 'CreditTransferMode',
    },
    CreditTransferMode: 'enum',
    Currency: `scalar.Currency`,
    CustomerInput: {},
    Date: `scalar.Date`,
    DateTime: `scalar.DateTime`,
    DeleteSupportingDocumentInput: {},
    DenySddInput: {},
    DenySddVirtualIbanEntryInput: {},
    DigitalCardFiltersInput: {},
    DigitalCardOrderByFieldInput: 'enum',
    DigitalCardOrderByInput: {
        field: 'DigitalCardOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    DigitalizationType: 'enum',
    DirectDebitSequence: 'enum',
    DisableAccountMembershipInput: {},
    DocumentFileSide: 'enum',
    DocumentReasonCode: 'enum',
    DocumentType: 'enum',
    EmailAddress: `scalar.EmailAddress`,
    EmploymentStatus: 'enum',
    EnableReceivedDirectDebitMandateInput: {},
    EnvType: 'enum',
    ExternalAccount: {
        balances: {},
    },
    ExternalAccountBalanceInput: {
        amount: 'AmountInput',
        type: 'ExternalAccountBalanceType',
        lastChangedAt: 'DateTime',
    },
    ExternalAccountBalanceType: 'enum',
    ExternalAccountDataSourceType: 'enum',
    ExternalAccountUsage: 'enum',
    FeesTypeEnum: 'enum',
    FieldValidationError: 'enum',
    FinalizeOnboardingInput: {},
    FundingLimitAmountInput: {
        amount: 'AmountInput',
    },
    FundingLimitSettingsChangeRequestFiltersInput: {
        status: 'FundingLimitSettingsChangeRequestStatus',
    },
    FundingLimitSettingsChangeRequestOrderByFieldInput: 'enum',
    FundingLimitSettingsChangeRequestOrderByInput: {
        field: 'FundingLimitSettingsChangeRequestOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    FundingLimitSettingsChangeRequestStatus: 'enum',
    FundingLimitSettingsStatus: 'enum',
    FundingSourceFiltersInput: {
        status: 'FundingSourceStatus',
    },
    FundingSourceOrderByFieldInput: 'enum',
    FundingSourceOrderByInput: {
        field: 'FundingSourceOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    FundingSourceStatus: 'enum',
    GenerateAccountStatementInput: {
        openingDate: 'DateTime',
        closingDate: 'DateTime',
        language: 'AccountLanguage',
        statementType: 'StatementType',
    },
    GenerateCapitalDepositDocumentUploadUrlInput: {},
    GenerateSupportingDocumentUploadUrlInput: {
        supportingDocumentType: 'SupportingDocumentType',
        supportingDocumentPurpose: 'SupportingDocumentPurposeEnum',
    },
    GrantConsentWithServerSignatureInput: {},
    HexColorCode: `scalar.HexColorCode`,
    IBAN: `scalar.IBAN`,
    IBANStatus: 'enum',
    IbanValidationInput: {
        iban: 'IBAN',
    },
    IdentificationFiltersInput: {
        statuses: 'SwanIdentificationStatus',
        levels: 'IdentificationLevel',
        processes: 'IdentificationProcess',
    },
    IdentificationInvalidReason: 'enum',
    IdentificationLevel: 'enum',
    IdentificationLevelInput: 'enum',
    IdentificationProcess: 'enum',
    IdentificationsOrderByField: 'enum',
    IdentificationsOrderByInput: {
        field: 'IdentificationsOrderByField',
        direction: 'OrderByDirection',
    },
    IdentificationStatus: 'enum',
    IdentityDocumentType: 'enum',
    IndividualUltimateBeneficialOwnerInput: {
        birthCountryCode: 'CCA3',
        type: 'IndividualUltimateBeneficialOwnerTypeEnum',
        residencyAddress: 'AddressInformationInput',
        title: 'TitleEnum',
    },
    IndividualUltimateBeneficialOwnerTypeEnum: 'enum',
    InitiateCheckMerchantPaymentInput: {
        amount: 'AmountInput',
    },
    InitiateCreditTransfersInput: {
        accountNumber: 'AccountNumber',
        creditTransfers: 'CreditTransferInput',
    },
    InitiateFundingRequestInput: {
        amount: 'AmountInput',
        requestedExecutionAt: 'DateTime',
    },
    InitiateInternationalCreditTransferInput: {
        accountNumber: 'AccountNumber',
        targetAmount: 'AmountInput',
        internationalBeneficiary: 'InternationalBeneficiaryInput',
        internationalCreditTransferDetails: 'InternationalCreditTransferDetailsInput',
        language: 'InternationalCreditTransferDisplayLanguage',
    },
    InitiateMerchantPaymentCollectionInput: {
        amount: 'AmountInput',
        internalDirectDebit: 'InternalDirectDebitPaymentCollectionInput',
        sepaDirectDebit: 'SepaDirectDebitPaymentCollectionInput',
    },
    InternalDirectDebitB2BPaymentMethodInput: {},
    InternalDirectDebitPaymentCollectionInput: {
        requestedExecutionAt: 'DateTime',
    },
    InternalDirectDebitSequence: 'enum',
    InternalDirectDebitStandardPaymentMethodInput: {},
    InternalPaymentDirectDebitMandate: {
        transactions: {
            orderBy: 'TransactionsOrderByInput',
            filters: 'TransactionsFiltersInput',
        },
    },
    InternalPaymentMandateScheme: 'enum',
    InternalPaymentMandateSequence: 'enum',
    InternalReceivedDirectDebitMandate: {
        transactions: {
            filters: 'TransactionsFiltersInput',
        },
    },
    InternalReceivedDirectDebitMandateScheme: 'enum',
    InternalReceivedDirectDebitMandateSequence: 'enum',
    InternationalAddressInput: {},
    InternationalBeneficiaryDetailsInput: {},
    InternationalBeneficiaryInput: {
        currency: 'Currency',
        details: 'InternationalBeneficiaryDetailsInput',
        route: 'InternationalCreditTransferRouteInput',
    },
    InternationalCreditTransferDetailsInput: {},
    InternationalCreditTransferDisplayLanguage: 'enum',
    InternationalCreditTransferRoute: 'enum',
    InternationalCreditTransferRouteInput: 'enum',
    InvalidArgumentRejectionCode: 'enum',
    InvalidIbanCode: 'enum',
    InvoiceStatus: 'enum',
    InvoiceType: 'enum',
    Language: 'enum',
    LegalDocumentsFilterInput: {
        status: 'LegalDocumentStatus',
        type: 'LegalDocumentType',
    },
    LegalDocumentStatus: 'enum',
    LegalDocumentType: 'enum',
    MandateLanguage: 'enum',
    MembershipInfoInput: {
        restrictedTo: 'RestrictedToInput',
        residencyAddress: 'ResidencyAddressInput',
    },
    MembershipsFilterInput: {
        status: 'AccountMembershipStatus',
    },
    MerchantCategoryDescription: 'enum',
    MerchantPaymentLinkStatus: 'enum',
    MerchantPaymentMethodStatus: 'enum',
    MerchantPaymentMethodType: 'enum',
    MerchantProfileFiltersInput: {
        status: 'MerchantProfileStatus',
    },
    MerchantProfileOrderByFieldInput: 'enum',
    MerchantProfileOrderByInput: {
        field: 'MerchantProfileOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    MerchantProfileStatus: 'enum',
    MonthlyIncome: 'enum',
    MonthlyPaymentVolume: 'enum',
    Mutation: {
        activatePhysicalCard: {
            input: 'ActivatePhysicalCardInput',
        },
        addAccountMembership: {
            input: 'AddAccountMembershipInput',
        },
        addAccountMemberships: {
            input: 'AddAccountMembershipsInput',
        },
        addCard: {
            input: 'AddCardInput',
        },
        addCardsWithGroupDelivery: {
            input: 'AddCardsWithGroupDeliveryInput',
        },
        addCards: {
            input: 'AddCardsInput',
        },
        addDigitalCard: {
            input: 'AddDigitalCardInput',
        },
        addExternalAccountBalance: {
            input: 'AddExternalAccountBalanceInput',
        },
        addExternalAccount: {
            input: 'AddExternalAccountInput',
        },
        addFundingLimitSettingsChangeRequest: {
            input: 'AddFundingLimitSettingsChangeRequestInput',
        },
        addOrUpdateExternalAccountBalance: {
            input: 'AddOrUpdateExternalAccountBalanceInput',
        },
        addSingleUseVirtualCard: {
            input: 'AddSingleUseVirtualCardInput',
        },
        addSingleUseVirtualCards: {
            input: 'AddSingleUseVirtualCardsInput',
        },
        addVirtualIbanEntry: {
            input: 'AddVirtualIbanInput',
        },
        allowSddVirtualIbanEntry: {
            input: 'AllowSddVirtualIbanEntryInput',
        },
        allowSdd: {
            input: 'AllowSddInput',
        },
        bindAccountMembership: {
            input: 'BindAccountMembershipInput',
        },
        cancelCard: {
            input: 'CancelCardInput',
        },
        cancelDigitalCard: {
            input: 'CancelDigitalCardInput',
        },
        cancelPhysicalCard: {
            input: 'CancelPhysicalCardInput',
        },
        cancelVirtualIbanEntry: {
            input: 'CancelVirtualIbanEntryInput',
        },
        closeAccount: {
            input: 'CloseAccountInput',
        },
        confirmPhysicalCardRenewal: {
            input: 'ConfirmPhysicalCardRenewalInput',
        },
        deleteSupportingDocument: {
            input: 'DeleteSupportingDocumentInput',
        },
        denySddVirtualIbanEntry: {
            input: 'DenySddVirtualIbanEntryInput',
        },
        denySdd: {
            input: 'DenySddInput',
        },
        disableAccountMembership: {
            input: 'DisableAccountMembershipInput',
        },
        finalizeOnboarding: {
            input: 'FinalizeOnboardingInput',
        },
        onboardCompanyAccountHolder: {
            input: 'OnboardCompanyAccountHolderInput',
        },
        onboardIndividualAccountHolder: {
            input: 'OnboardIndividualAccountHolderInput',
        },
        printPhysicalCard: {
            input: 'PrintPhysicalCardInput',
        },
        resumeAccountMembership: {
            input: 'ResumeAccountMembershipInput',
        },
        resumePhysicalCard: {
            input: 'ResumePhysicalCardInput',
        },
        suspendAccountMembership: {
            input: 'SuspendAccountMembershipInput',
        },
        suspendPhysicalCard: {
            input: 'SuspendPhysicalCardInput',
        },
        updateAccountHolder: {
            input: 'UpdateAccountHolderInput',
        },
        updateAccountMembership: {
            input: 'UpdateAccountMembershipInput',
        },
        updateAccount: {
            input: 'UpdateAccountInput',
        },
        updateCard: {
            input: 'UpdateCardInput',
        },
        updateCompanyOnboarding: {
            input: 'UpdateCompanyOnboardingInput',
        },
        updateIndividualOnboarding: {
            input: 'UpdateIndividualOnboardingInput',
        },
        updateSupportingDocument: {
            input: 'UpdateSupportingDocumentInput',
        },
        viewCardNumbers: {
            input: 'ViewCardNumbersInput',
        },
        viewPhysicalCardNumbers: {
            input: 'ViewPhysicalCardNumbersInput',
        },
        viewPhysicalCardPin: {
            input: 'ViewPhysicalCardPinInput',
        },
        generateSupportingDocumentUploadUrl: {
            input: 'GenerateSupportingDocumentUploadUrlInput',
        },
        requestSupportingDocumentCollectionReview: {
            input: 'RequestSupportingDocumentCollectionReviewInput',
        },
        generateAccountStatement: {
            input: 'GenerateAccountStatementInput',
        },
        createCapitalDepositCase: {
            input: 'CreateCapitalDepositCaseInput',
        },
        generateCapitalDepositDocumentUploadUrl: {
            input: 'GenerateCapitalDepositDocumentUploadUrlInput',
        },
        cancelConsent: {
            input: 'CancelConsentInput',
        },
        createMultiConsent: {
            input: 'CreateMultiConsentInput',
        },
        grantConsentWithServerSignature: {
            input: 'GrantConsentWithServerSignatureInput',
        },
        updateUserConsentSettings: {
            input: 'UpdateUserConsentSettingsInput',
        },
        addReceivedInternalDirectDebitB2bMandate: {
            input: 'AddReceivedInternalDirectDebitB2bMandateInput',
        },
        addReceivedSepaDirectDebitB2bMandate: {
            input: 'AddReceivedSepaDirectDebitB2bMandateInput',
        },
        enableReceivedDirectDebitMandate: {
            input: 'EnableReceivedDirectDebitMandateInput',
        },
        suspendReceivedDirectDebitMandate: {
            input: 'SuspendReceivedDirectDebitMandateInput',
        },
        updateReceivedSepaDirectDebitB2bMandate: {
            input: 'UpdateReceivedSepaDirectDebitB2bMandateInput',
        },
        addInternalDirectDebitPaymentMandate: {
            input: 'AddInternalDirectDebitPaymentMandateInput',
        },
        addMerchantProfile: {
            input: 'AddMerchantProfileInput',
        },
        addSepaDirectDebitPaymentMandate: {
            input: 'AddSepaDirectDebitPaymentMandateInput',
        },
        initiateCheckMerchantPayment: {
            input: 'InitiateCheckMerchantPaymentInput',
        },
        createMerchantPaymentLink: {
            input: 'CreateMerchantPaymentLinkInput',
        },
        initiateMerchantPaymentCollection: {
            input: 'InitiateMerchantPaymentCollectionInput',
        },
        requestMerchantPaymentMethods: {
            input: 'RequestMerchantPaymentMethodsInput',
        },
        requestMerchantProfileUpdate: {
            input: 'RequestMerchantProfileUpdateInput',
        },
        cancelTransaction: {
            input: 'CancelTransactionInput',
        },
        initiateCreditTransfers: {
            input: 'InitiateCreditTransfersInput',
        },
        refund: {
            input: 'RefundInput',
        },
        addDirectDebitFundingSource: {
            input: 'AddDirectDebitFundingSourceInput',
        },
        cancelFundingSource: {
            input: 'CancelFundingSourceInput',
        },
        cancelStandingOrder: {
            input: 'CancelStandingOrderInput',
        },
        initiateFundingRequest: {
            input: 'InitiateFundingRequestInput',
        },
        initiateInternationalCreditTransfer: {
            input: 'InitiateInternationalCreditTransferInput',
        },
        scheduleStandingOrder: {
            input: 'ScheduleStandingOrderInput',
        },
        replayWebhookEvent: {
            input: 'ReplayWebhookEventInput',
        },
        addWebhookSubscription: {
            input: 'AddWebhookSubscriptionInput',
        },
    },
    OAuthRedirectParametersInput: {},
    OnboardCompanyAccountHolderInput: {
        companyType: 'CompanyType',
        businessActivity: 'BusinessActivity',
        accountCountry: 'AccountCountry',
        monthlyPaymentVolume: 'MonthlyPaymentVolume',
        individualUltimateBeneficialOwners: 'IndividualUltimateBeneficialOwnerInput',
        residencyAddress: 'ResidencyAddressInput',
        oAuthRedirectParameters: 'OAuthRedirectParametersInput',
        legalRepresentativePersonalAddress: 'AddressInformationInput',
        typeOfRepresentation: 'TypeOfRepresentation',
    },
    OnboardCompanyShareholderInput: {
        capitalDepositAmount: 'AmountInput',
        onboardingInfo: 'OnboardCompanyAccountHolderInput',
    },
    OnboardIndividualAccountHolderInput: {
        accountCountry: 'AccountCountry',
        employmentStatus: 'EmploymentStatus',
        monthlyIncome: 'MonthlyIncome',
        residencyAddress: 'ResidencyAddressInput',
        oAuthRedirectParameters: 'OAuthRedirectParametersInput',
    },
    OnboardIndividualShareholderInput: {
        nationality: 'CCA3',
        capitalDepositAmount: 'AmountInput',
        onboardingInfo: 'OnboardIndividualAccountHolderInput',
    },
    OnboardingFiltersInput: {
        types: 'AccountHolderType',
        status: 'OnboardingStatus',
    },
    OnboardingOrderByFieldInput: 'enum',
    OnboardingOrderByInput: {
        field: 'OnboardingOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    OnboardingState: 'enum',
    OnboardingStatus: 'enum',
    OrderByDirection: 'enum',
    PartnerCloseAccountReasonInput: {
        type: 'PartnerCloseAccountReasonType',
    },
    PartnerCloseAccountReasonType: 'enum',
    PartnershipStatus: 'enum',
    Payment: {
        transactions: {
            orderBy: 'TransactionsOrderByInput',
            filters: 'TransactionsFiltersInput',
        },
    },
    PaymentAccountType: 'enum',
    PaymentFiltersInput: {
        status: 'PaymentStatus',
    },
    PaymentLevel: 'enum',
    PaymentLinkSequenceType: 'enum',
    PaymentMandate: {
        transactions: {
            filters: 'TransactionsFiltersInput',
        },
    },
    PaymentMandateCanceledReason: 'enum',
    PaymentMandateFiltersInput: {
        status: 'PaymentMandateStatus',
        scheme: 'PaymentMandateScheme',
    },
    PaymentMandateOrderByFieldInput: 'enum',
    PaymentMandateOrderByInput: {
        field: 'PaymentMandateOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    PaymentMandateScheme: 'enum',
    PaymentMandateSequence: 'enum',
    PaymentMandateStatus: 'enum',
    PaymentOrderByFieldInput: 'enum',
    PaymentOrderByInput: {
        field: 'PaymentOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    PaymentProduct: 'enum',
    PaymentStatus: 'enum',
    PendingDigitalCard: {
        inAppProvisioningData: {
            signatureData: 'SignatureData',
        },
    },
    PendingDigitalCardStatus: 'enum',
    PhoneNumber: `scalar.PhoneNumber`,
    PhysicalCardConfigInput: {
        deliveryAddress: 'CompleteAddressInput',
        physicalCardCustomOptions: 'PhysicalCardCustomOptionsInput',
    },
    PhysicalCardCustomOptionsForGroupDeliveryInput: {},
    PhysicalCardCustomOptionsForPrintInput: {},
    PhysicalCardCustomOptionsInput: {},
    PhysicalCardStatus: 'enum',
    PIN: `scalar.PIN`,
    PreferredNotificationChannel: 'enum',
    PrintPhysicalCardInput: {
        address: 'CompleteAddressInput',
        physicalCardCustomOptions: 'PhysicalCardCustomOptionsForPrintInput',
    },
    ProductType: 'enum',
    ProjectCardSettingsBackgroundType: 'enum',
    ProjectCardStatus: 'enum',
    ProjectInfo: {
        tcuDocumentUri: {},
    },
    ProjectStatus: 'enum',
    ProjectType: 'enum',
    Query: {
        fundingLimitSettingsChangeRequest: {},
        ibanValidation: {
            input: 'IbanValidationInput',
        },
        accountHolder: {},
        accountHolders: {
            filters: 'AccountHolderFilterInput',
            orderBy: 'AccountHolderOrderByInput',
        },
        accountMembership: {},
        accountMemberships: {
            filters: 'AccountMembershipsFilterInput',
            orderBy: 'AccountMembershipOrderByInput',
        },
        account: {},
        accounts: {
            filters: 'AccountFilterInput',
            orderBy: 'AccountOrderByInput',
        },
        beneficiaryVerification: {
            input: 'BeneficiaryVerificationInput',
        },
        card: {},
        cards: {
            orderBy: 'CardOrderByInput',
            filters: 'CardFiltersInput',
        },
        onboarding: {},
        onboardings: {
            filters: 'OnboardingFiltersInput',
            orderBy: 'OnboardingOrderByInput',
        },
        supportingDocumentCollection: {},
        accountStatement: {},
        payment: {},
        payments: {
            orderBy: 'PaymentOrderByInput',
            filters: 'PaymentFiltersInput',
        },
        transaction: {},
        transactions: {
            orderBy: 'TransactionsOrderByInput',
            filters: 'TransactionsFiltersInput',
        },
        accountInvoice: {},
        capitalDepositCase: {},
        capitalDepositCases: {
            filters: 'CapitalDepositCaseFiltersInput',
            orderBy: 'CapitalDepositCaseOrderByInput',
        },
        capitalDepositDocument: {},
        shareholder: {},
        consent: {},
        consents: {
            filters: 'ConsentsFiltersInput',
        },
        user: {},
        users: {
            filters: 'UserFilterInput',
        },
        receivedDirectDebitMandate: {},
        merchantProfile: {},
        fundingSource: {},
        internationalBeneficiaryDynamicForms: {
            amount: 'AmountInput',
            language: 'InternationalCreditTransferDisplayLanguage',
            dynamicFields: 'InternationalBeneficiaryDetailsInput',
        },
        internationalCreditTransferTransactionDetailsDynamicForm: {
            targetAmount: 'AmountInput',
            language: 'InternationalCreditTransferDisplayLanguage',
            internationalBeneficiary: 'InternationalBeneficiaryInput',
            refreshableFields: 'InternationalCreditTransferDetailsInput',
        },
        internationalCreditTransferQuote: {
            targetAmount: 'AmountInput',
            language: 'InternationalCreditTransferDisplayLanguage',
        },
        standingOrder: {},
        webhookEventLog: {},
    },
    ReasonInput: {},
    ReceivedDirectDebitMandateScheme: 'enum',
    ReceivedDirectDebitMandateStatus: 'enum',
    RefundInput: {
        refundTransactions: 'RefundTransaction',
    },
    RefundRejectionCode: 'enum',
    RefundTransaction: {
        amount: 'AmountInput',
        executionDate: 'DateTime',
    },
    RejectedFundingSourceReason: 'enum',
    RejectedReasonCode: 'enum',
    RejectedVerificationReason: 'enum',
    ReleasedReason: 'enum',
    ReplayWebhookEventInput: {},
    RequestMerchantPaymentMethodsInput: {
        internalDirectDebitStandard: 'InternalDirectDebitStandardPaymentMethodInput',
        internalDirectDebitB2B: 'InternalDirectDebitB2BPaymentMethodInput',
        sepaDirectDebitCore: 'SepaDirectDebitCorePaymentMethodInput',
        sepaDirectDebitB2B: 'SepaDirectDebitB2BPaymentMethodInput',
        check: 'CheckPaymentMethodInput',
        card: 'CardPaymentMethodInput',
    },
    RequestMerchantProfileUpdateInput: {
        productType: 'ProductType',
        expectedMonthlyPaymentVolume: 'AmountInput',
        expectedAverageBasket: 'AmountInput',
    },
    RequestMerchantProfileUpdateStatus: 'enum',
    RequestSupportingDocumentCollectionReviewInput: {},
    ResidencyAddressInput: {
        country: 'CCA3',
    },
    RestrictedToInput: {
        birthDate: 'Date',
        phoneNumber: 'PhoneNumber',
    },
    ResumeAccountMembershipInput: {},
    ResumePhysicalCardInput: {},
    ScheduleStandingOrderInput: {
        amount: 'AmountInput',
        targetAvailableBalance: 'AmountInput',
        period: 'StandingOrderPeriod',
        firstExecutionDate: 'DateTime',
        lastExecutionDate: 'DateTime',
        sepaBeneficiary: 'SepaBeneficiaryInput',
        creditTransferMode: 'CreditTransferMode',
    },
    SepaBeneficiaryInput: {
        iban: 'IBAN',
        address: 'AddressInput',
    },
    SepaCreditorIdentifier: `scalar.SepaCreditorIdentifier`,
    SepaDirectDebitB2BPaymentMethodInput: {},
    SepaDirectDebitCorePaymentMethodInput: {},
    SepaDirectDebitPaymentCollectionInput: {
        requestedExecutionAt: 'DateTime',
    },
    SEPADirectDebitScheme: 'enum',
    SEPAPaymentDirectDebitMandate: {
        transactions: {
            orderBy: 'TransactionsOrderByInput',
            filters: 'TransactionsFiltersInput',
        },
    },
    SepaPaymentMandateDebtorInput: {
        address: 'AddressInput',
    },
    SEPAPaymentMandateScheme: 'enum',
    SEPAPaymentMandateSequence: 'enum',
    SEPAReceivedDirectDebitMandate: {
        transactions: {
            orderBy: 'TransactionsOrderByInput',
            filters: 'TransactionsFiltersInput',
        },
    },
    SEPAReceivedDirectDebitMandateScheme: 'enum',
    SEPAReceivedDirectDebitMandateSequence: 'enum',
    SepaReference: `scalar.SepaReference`,
    ShareholderStatus: 'enum',
    ShareholderType: 'enum',
    SignatureData: {
        certificates: 'Certificate',
    },
    SimulationCardType: 'enum',
    SingleUseVirtualCardConfigInput: {
        spendingLimit: 'SpendingLimitInput',
    },
    SpendingLimitInput: {
        period: 'SpendingLimitPeriodInput',
        amount: 'AmountInput',
    },
    SpendingLimitPeriod: 'enum',
    SpendingLimitPeriodInput: 'enum',
    SpendingLimitType: 'enum',
    StandingOrder: {
        payments: {
            orderBy: 'PaymentOrderByInput',
            filters: 'PaymentFiltersInput',
        },
    },
    StandingOrderPeriod: 'enum',
    StandingOrderStatus: 'enum',
    StatementFiltersInput: {
        isAfterUpdatedAt: 'DateTime',
        isBeforeUpdatedAt: 'DateTime',
        period: 'StatementPeriod',
    },
    StatementPeriod: 'enum',
    StatementStatus: 'enum',
    StatementType: 'enum',
    StatusText: 'enum',
    SupportingDocumentCollectionStatus: 'enum',
    SupportingDocumentCollectMode: 'enum',
    SupportingDocumentCommunicationLanguageSettings: 'enum',
    SupportingDocumentPurposeEnum: 'enum',
    SupportingDocumentStatus: 'enum',
    SupportingDocumentType: 'enum',
    SuspendAccountMembershipInput: {},
    SuspendAccountReasonInput: {
        type: 'SuspendAccountReasonType',
    },
    SuspendAccountReasonType: 'enum',
    SuspendPhysicalCardInput: {},
    SuspendReceivedDirectDebitMandatedRejectionReason: 'enum',
    SuspendReceivedDirectDebitMandateInput: {},
    SwanAccountBeneficiaryInput: {
        accountNumber: 'AccountNumber',
    },
    SwanIdentificationStatus: 'enum',
    TitleEnum: 'enum',
    TokenRequestorId: `scalar.TokenRequestorId`,
    TransactionReasonCode: 'enum',
    TransactionsFiltersInput: {
        status: 'TransactionStatus',
        paymentProduct: 'PaymentProduct',
        isAfterUpdatedAt: 'DateTime',
        isBeforeUpdatedAt: 'DateTime',
        type: 'TransactionTypeEnum',
    },
    TransactionSide: 'enum',
    TransactionsOrderByField: 'enum',
    TransactionsOrderByInput: {
        field: 'TransactionsOrderByField',
        direction: 'OrderByDirection',
    },
    TransactionStatus: 'enum',
    TransactionTypeEnum: 'enum',
    TrustedBeneficiaryFiltersInput: {
        status: 'TrustedBeneficiaryStatus',
        type: 'BeneficiaryType',
    },
    TrustedBeneficiaryOrderByFieldInput: 'enum',
    TrustedBeneficiaryOrderByInput: {
        field: 'TrustedBeneficiaryOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    TrustedBeneficiaryStatus: 'enum',
    TypeOfRepresentation: 'enum',
    UltimateBeneficialOwnerType: 'enum',
    UpdateAccountHolderInput: {},
    UpdateAccountInput: {
        language: 'AccountLanguage',
    },
    UpdateAccountMembershipInput: {
        restrictedTo: 'UpdatedRestrictedToInput',
        spendingLimit: 'SpendingLimitInput',
        residencyAddress: 'ResidencyAddressInput',
    },
    UpdateCardInput: {
        cardContractExpiryDate: 'DateTime',
        spendingLimit: 'SpendingLimitInput',
    },
    UpdateCompanyOnboardingInput: {
        accountCountry: 'AccountCountry',
        companyType: 'CompanyType',
        businessActivity: 'BusinessActivity',
        monthlyPaymentVolume: 'MonthlyPaymentVolume',
        individualUltimateBeneficialOwners: 'IndividualUltimateBeneficialOwnerInput',
        residencyAddress: 'ResidencyAddressInput',
        legalRepresentativePersonalAddress: 'AddressInformationInput',
        typeOfRepresentation: 'TypeOfRepresentation',
    },
    UpdatedRestrictedToInput: {
        birthDate: 'Date',
    },
    UpdateIndividualOnboardingInput: {
        accountCountry: 'AccountCountry',
        employmentStatus: 'EmploymentStatus',
        monthlyIncome: 'MonthlyIncome',
        residencyAddress: 'ResidencyAddressInput',
    },
    UpdateReceivedSepaDirectDebitB2bMandateInput: {},
    UpdateSupportingDocumentInput: {
        supportingDocumentType: 'SupportingDocumentType',
        supportingDocumentPurpose: 'SupportingDocumentPurposeEnum',
    },
    UpdateUserConsentSettingsInput: {
        preferredNotificationChannel: 'PreferredNotificationChannel',
    },
    Upload: `scalar.Upload`,
    URL: `scalar.URL`,
    User: {
        accountMemberships: {
            filters: 'AccountMembershipsFilterInput',
        },
        identifications: {
            filters: 'IdentificationFiltersInput',
            orderBy: 'IdentificationsOrderByInput',
        },
    },
    UserFilterInput: {
        birthDate: 'Date',
        identificationLevel: 'IdentificationLevelInput',
        nationalityCCA3: 'CCA3',
        preferredNotificationChannel: 'PreferredNotificationChannel',
    },
    UserOrderByFieldInput: 'enum',
    UserOrderByInput: {
        field: 'UserOrderByFieldInput',
        direction: 'OrderByDirection',
    },
    ValidationFieldErrorCode: 'enum',
    VerificationFlow: 'enum',
    VerificationStatus: 'enum',
    ViewCardNumbersInput: {},
    ViewPhysicalCardNumbersInput: {},
    ViewPhysicalCardPinInput: {},
    WalletProviderType: 'enum',
    WalletToken: `scalar.WalletToken`,
    WebhookEventLogFiltersInput: {
        statusText: 'StatusText',
        startDate: 'DateTime',
        endDate: 'DateTime',
    },
    WebhookSubscriptionCreationStatus: 'enum',
    WebhookSubscriptionStatus: 'enum',
};
exports.ReturnTypes = {
    Account: {
        id: 'ID',
        number: 'AccountNumber',
        name: 'String',
        holder: 'AccountHolder',
        cashAccountType: 'CashAccountType',
        country: 'AccountCountry',
        paymentLevel: 'PaymentLevel',
        BIC: 'BIC',
        IBAN: 'IBAN',
        currency: 'Currency',
        blockSDD: 'Boolean',
        statusInfo: 'AccountStatusInfo',
        partnershipStatusInfo: 'PartnershipStatusInfo',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        virtualIbanEntries: 'VirtualIBANEntryConnection',
        memberships: 'AccountMembershipConnection',
        requiredConsentToFetchNewTransactions: 'Boolean',
        language: 'AccountLanguage',
        legalRepresentativeMembership: 'AccountMembership',
        paymentAccountType: 'PaymentAccountType',
        upgradedAt: 'DateTime',
        bankDetails: 'String',
        legalDocuments: 'LegalDocumentConnection',
        balances: 'AccountBalances',
        statements: 'StatementConnection',
        transactions: 'TransactionConnection',
        invoices: 'InvoiceConnection',
        receivedDirectDebitMandates: 'ReceivedDirectDebitMandateConnection',
        merchantProfiles: 'MerchantProfileConnection',
        standingOrders: 'StandingOrderConnection',
        fundingSources: 'FundingSourceConnection',
        trustedBeneficiaries: 'TrustedBeneficiaryConnection',
    },
    AccountBalances: {
        available: 'Amount',
        pending: 'Amount',
        booked: 'Amount',
        reserved: 'Amount',
    },
    AccountClosedStatus: {
        status: 'AccountStatus',
        reason: 'String',
        reasonInfo: 'CloseAccountStatusReason',
    },
    AccountClosingStatus: {
        status: 'AccountStatus',
        reason: 'String',
        reasonInfo: 'CloseAccountStatusReason',
    },
    AccountConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'AccountEdge',
    },
    AccountEdge: {
        cursor: 'String',
        node: 'Account',
    },
    AccountHolder: {
        id: 'ID',
        verificationStatus: 'VerificationStatus',
        info: 'AccountHolderInfo',
        statusInfo: 'AccountHolderStatusInfo',
        residencyAddress: 'AddressInfo',
        createdDate: 'DateTime',
        updatedDate: 'DateTime',
        accounts: 'AccountConnection',
        supportingDocumentCollections: 'SupportingDocumentCollectionConnection',
        fundingLimitSettingsChangeRequests: 'FundingLimitSettingsChangeRequestConnection',
        onboarding: 'Onboarding',
        externalAccounts: 'ExternalAccountConnection',
        paymentMandates: 'PaymentMandateConnection',
        fundingLimitSettings: 'FundingLimitSettings',
    },
    AccountHolderCanceledStatusInfo: {
        status: 'AccountHolderStatus',
        reason: 'String',
    },
    AccountHolderCompanyInfo: {
        type: 'AccountHolderType',
        name: 'String',
        registrationNumber: 'String',
        companyRegistrationDate: 'Date',
        companyType: 'CompanyType',
        businessActivity: 'BusinessActivity',
        businessActivityDescription: 'String',
        monthlyPaymentVolume: 'MonthlyPaymentVolume',
        individualUltimateBeneficialOwners: 'IndividualUltimateBeneficialOwner',
        vatNumber: 'String',
        taxIdentificationNumber: 'String',
        legalRepresentativePersonalAddress: 'AddressInformation',
    },
    AccountHolderConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'AccountHolderEdge',
    },
    AccountHolderEdge: {
        cursor: 'String',
        node: 'AccountHolder',
    },
    AccountHolderEnabledStatusInfo: {
        status: 'AccountHolderStatus',
    },
    AccountHolderIndividualInfo: {
        type: 'AccountHolderType',
        name: 'String',
        employmentStatus: 'EmploymentStatus',
        monthlyIncome: 'MonthlyIncome',
        user: 'User',
        taxIdentificationNumber: 'String',
    },
    AccountHolderInfo: {
        '...on AccountHolderCompanyInfo': 'AccountHolderCompanyInfo',
        '...on AccountHolderIndividualInfo': 'AccountHolderIndividualInfo',
        type: 'AccountHolderType',
        name: 'String',
    },
    AccountHolderNotFoundRejection: {
        message: 'String',
    },
    AccountHolderStatusInfo: {
        '...on AccountHolderCanceledStatusInfo': 'AccountHolderCanceledStatusInfo',
        '...on AccountHolderEnabledStatusInfo': 'AccountHolderEnabledStatusInfo',
        '...on AccountHolderSuspendedStatusInfo': 'AccountHolderSuspendedStatusInfo',
        status: 'AccountHolderStatus',
    },
    AccountHolderSuspendedStatusInfo: {
        status: 'AccountHolderStatus',
        reason: 'String',
    },
    AccountHolderTypeIndividualRejection: {
        message: 'String',
    },
    AccountMembership: {
        id: 'ID',
        email: 'String',
        user: 'User',
        legalRepresentative: 'Boolean',
        canViewAccount: 'Boolean',
        canManageBeneficiaries: 'Boolean',
        canInitiatePayments: 'Boolean',
        canManageAccountMembership: 'Boolean',
        canManageCards: 'Boolean',
        statusInfo: 'AccountMembershipStatusInfo',
        account: 'Account',
        spendingLimits: 'SpendingLimit',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        version: 'String',
        residencyAddress: 'AddressInfo',
        taxIdentificationNumber: 'String',
        acceptedIdentificationLevels: 'IdentificationLevel',
        recommendedIdentificationLevel: 'IdentificationLevel',
        hasRequiredIdentificationLevel: 'Boolean',
        disabledAt: 'DateTime',
        cards: 'CardConnection',
        spending: 'Spending',
    },
    AccountMembershipBindingUserErrorStatusInfo: {
        status: 'AccountMembershipStatus',
        firstNameMatchError: 'Boolean',
        idVerifiedMatchError: 'Boolean',
        lastNameMatchError: 'Boolean',
        phoneNumberMatchError: 'Boolean',
        birthDateMatchError: 'Boolean',
        restrictedTo: 'RestrictedTo',
    },
    AccountMembershipCannotBeDisabledRejection: {
        accountMembershipId: 'String',
        message: 'String',
    },
    AccountMembershipCannotBeUpdatedRejection: {
        id: 'String',
        message: 'String',
    },
    AccountMembershipConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'AccountMembershipEdge',
    },
    AccountMembershipConsentPendingStatusInfo: {
        status: 'AccountMembershipStatus',
        consent: 'Consent',
        restrictedTo: 'RestrictedTo',
    },
    AccountMembershipDisabledStatusInfo: {
        status: 'AccountMembershipStatus',
        reason: 'String',
    },
    AccountMembershipEdge: {
        cursor: 'String',
        node: 'AccountMembership',
    },
    AccountMembershipEnabledStatusInfo: {
        status: 'AccountMembershipStatus',
    },
    AccountMembershipInvitationSentStatusInfo: {
        status: 'AccountMembershipStatus',
        restrictedTo: 'RestrictedTo',
    },
    AccountMembershipNotAllowedRejection: {
        message: 'String',
    },
    AccountMembershipNotFoundRejection: {
        id: 'String',
        message: 'String',
    },
    AccountMembershipNotReadyToBeBoundRejection: {
        id: 'String',
        message: 'String',
    },
    AccountMembershipStatusInfo: {
        '...on AccountMembershipBindingUserErrorStatusInfo': 'AccountMembershipBindingUserErrorStatusInfo',
        '...on AccountMembershipConsentPendingStatusInfo': 'AccountMembershipConsentPendingStatusInfo',
        '...on AccountMembershipDisabledStatusInfo': 'AccountMembershipDisabledStatusInfo',
        '...on AccountMembershipEnabledStatusInfo': 'AccountMembershipEnabledStatusInfo',
        '...on AccountMembershipInvitationSentStatusInfo': 'AccountMembershipInvitationSentStatusInfo',
        '...on AccountMembershipSuspendedStatusInfo': 'AccountMembershipSuspendedStatusInfo',
        status: 'AccountMembershipStatus',
    },
    AccountMembershipSuspendedStatusInfo: {
        status: 'AccountMembershipStatus',
        reason: 'String',
    },
    AccountNotEligibleRejection: {
        message: 'String',
    },
    AccountNotFoundRejection: {
        id: 'String',
        message: 'String',
    },
    AccountNumber: `scalar.AccountNumber`,
    AccountOpenedStatus: {
        status: 'AccountStatus',
    },
    AccountStatusInfo: {
        '...on AccountClosedStatus': 'AccountClosedStatus',
        '...on AccountClosingStatus': 'AccountClosingStatus',
        '...on AccountOpenedStatus': 'AccountOpenedStatus',
        '...on AccountSuspendedStatus': 'AccountSuspendedStatus',
        status: 'AccountStatus',
    },
    AccountSuspendedStatus: {
        status: 'AccountStatus',
        reason: 'String',
        reasonInfo: 'SuspendAccountStatusReason',
    },
    AccountVerification: {
        '...on DirectDebitAccountVerification': 'DirectDebitAccountVerification',
        createdAt: 'DateTime',
        id: 'ID',
        statusInfo: 'AccountVerificationStatusInfo',
        updatedAt: 'DateTime',
    },
    AccountVerificationAlreadyRejectedRejection: {
        message: 'String',
    },
    AccountVerificationStatusInfo: {
        '...on PendingReviewStatusInfo': 'PendingReviewStatusInfo',
        '...on PendingVerificationStatusInfo': 'PendingVerificationStatusInfo',
        '...on RejectedVerificationStatusInfo': 'RejectedVerificationStatusInfo',
        '...on VerifiedStatusInfo': 'VerifiedStatusInfo',
        status: 'AccountVerificationStatus',
    },
    AccountVerificationWrongStatusRejection: {
        message: 'String',
    },
    ActionNotAllowedRejection: {
        message: 'String',
    },
    ActivatePhysicalCardPayload: {
        '...on ActivatePhysicalCardSuccessPayload': 'ActivatePhysicalCardSuccessPayload',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on PhysicalCardNotFoundRejection': 'PhysicalCardNotFoundRejection',
        '...on PhysicalCardWrongStatusRejection': 'PhysicalCardWrongStatusRejection',
        '...on CannotActivatePhysicalCardRejection': 'CannotActivatePhysicalCardRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on CardNotFoundRejection': 'CardNotFoundRejection',
        '...on UserNotCardHolderRejection': 'UserNotCardHolderRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    ActivatePhysicalCardSuccessPayload: {
        consent: 'Consent',
        physicalCard: 'PhysicalCard',
    },
    ActiveMerchantPaymentLinkStatusInfo: {
        status: 'MerchantPaymentLinkStatus',
        expiresAt: 'DateTime',
    },
    AddAccountMembershipPayload: {
        '...on AddAccountMembershipSuccessPayload': 'AddAccountMembershipSuccessPayload',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on InvalidPhoneNumberRejection': 'InvalidPhoneNumberRejection',
        '...on PermissionCannotBeGrantedRejection': 'PermissionCannotBeGrantedRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    AddAccountMembershipsPayload: {
        '...on AddAccountMembershipsSuccessPayload': 'AddAccountMembershipsSuccessPayload',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on InvalidPhoneNumberRejection': 'InvalidPhoneNumberRejection',
        '...on PermissionCannotBeGrantedRejection': 'PermissionCannotBeGrantedRejection',
        '...on TooManyItemsRejection': 'TooManyItemsRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    AddAccountMembershipsSuccessPayload: {
        accountMemberships: 'AccountMembership',
    },
    AddAccountMembershipSuccessPayload: {
        accountMembership: 'AccountMembership',
    },
    AddCardPayload: {
        '...on AddCardSuccessPayload': 'AddCardSuccessPayload',
        '...on AccountMembershipNotAllowedRejection': 'AccountMembershipNotAllowedRejection',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on CardProductDisabledRejection': 'CardProductDisabledRejection',
        '...on CardProductSuspendedRejection': 'CardProductSuspendedRejection',
        '...on EnabledCardDesignNotFoundRejection': 'EnabledCardDesignNotFoundRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on MissingMandatoryFieldRejection': 'MissingMandatoryFieldRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    AddCardsPayload: {
        '...on AddCardsSuccessPayload': 'AddCardsSuccessPayload',
        '...on AddingCardsToDifferentAccountsRejection': 'AddingCardsToDifferentAccountsRejection',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on TooManyItemsRejection': 'TooManyItemsRejection',
        '...on AccountMembershipNotAllowedRejection': 'AccountMembershipNotAllowedRejection',
        '...on CardProductSuspendedRejection': 'CardProductSuspendedRejection',
        '...on CardProductNotApplicableToPhysicalCardsRejection': 'CardProductNotApplicableToPhysicalCardsRejection',
        '...on CardProductDisabledRejection': 'CardProductDisabledRejection',
        '...on EnabledCardDesignNotFoundRejection': 'EnabledCardDesignNotFoundRejection',
        '...on MissingMandatoryFieldRejection': 'MissingMandatoryFieldRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    AddCardsSuccessPayload: {
        cards: 'Card',
    },
    AddCardSuccessPayload: {
        card: 'Card',
    },
    AddCardsWithGroupDeliveryPayload: {
        '...on AddCardsWithGroupDeliverySuccessPayload': 'AddCardsWithGroupDeliverySuccessPayload',
        '...on AddingCardsToDifferentAccountsRejection': 'AddingCardsToDifferentAccountsRejection',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on TooManyItemsRejection': 'TooManyItemsRejection',
        '...on AccountMembershipNotAllowedRejection': 'AccountMembershipNotAllowedRejection',
        '...on CardProductSuspendedRejection': 'CardProductSuspendedRejection',
        '...on CardProductNotApplicableToPhysicalCardsRejection': 'CardProductNotApplicableToPhysicalCardsRejection',
        '...on CardProductDisabledRejection': 'CardProductDisabledRejection',
        '...on EnabledCardDesignNotFoundRejection': 'EnabledCardDesignNotFoundRejection',
        '...on MissingMandatoryFieldRejection': 'MissingMandatoryFieldRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    AddCardsWithGroupDeliverySuccessPayload: {
        cards: 'Card',
    },
    AddDigitalCardPayload: {
        '...on AddDigitalCardSuccessPayload': 'AddDigitalCardSuccessPayload',
        '...on CardNotFoundRejection': 'CardNotFoundRejection',
        '...on CardCanNotBeDigitalizedRejection': 'CardCanNotBeDigitalizedRejection',
        '...on ApplePayNotAllowedForProjectRejection': 'ApplePayNotAllowedForProjectRejection',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on AccountMembershipNotAllowedRejection': 'AccountMembershipNotAllowedRejection',
        '...on UserNotCardHolderRejection': 'UserNotCardHolderRejection',
        '...on CardProductDisabledRejection': 'CardProductDisabledRejection',
        '...on EnabledCardDesignNotFoundRejection': 'EnabledCardDesignNotFoundRejection',
        '...on MissingMandatoryFieldRejection': 'MissingMandatoryFieldRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    AddDigitalCardSuccessPayload: {
        digitalCard: 'PendingDigitalCard',
    },
    AddDirectDebitFundingSourcePayload: {
        '...on AddDirectDebitFundingSourceSuccessPayload': 'AddDirectDebitFundingSourceSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on NotFoundRejection': 'NotFoundRejection',
        '...on AccountVerificationAlreadyRejectedRejection': 'AccountVerificationAlreadyRejectedRejection',
        '...on IBANNotReachableRejection': 'IBANNotReachableRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    AddDirectDebitFundingSourceSuccessPayload: {
        fundingSource: 'FundingSource',
    },
    AddExternalAccountBalancePayload: {
        '...on AddExternalAccountBalanceSuccessPayload': 'AddExternalAccountBalanceSuccessPayload',
        '...on ValidationRejection': 'ValidationRejection',
        '...on ExternalAccountBalanceAlreadyExistsRejection': 'ExternalAccountBalanceAlreadyExistsRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
    },
    AddExternalAccountBalanceSuccessPayload: {
        externalAccountBalance: 'ExternalAccountBalance',
    },
    AddExternalAccountPayload: {
        '...on AddExternalAccountSuccessPayload': 'AddExternalAccountSuccessPayload',
        '...on ValidationRejection': 'ValidationRejection',
        '...on IbanValidationRejection': 'IbanValidationRejection',
        '...on ExternalAccountAlreadyExistsRejection': 'ExternalAccountAlreadyExistsRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
    },
    AddExternalAccountSuccessPayload: {
        externalAccount: 'ExternalAccount',
    },
    AddFundingLimitSettingsChangeRequestPayload: {
        '...on AddFundingLimitSettingsChangeRequestSuccessPayload': 'AddFundingLimitSettingsChangeRequestSuccessPayload',
        '...on FundingLimitSettingsChangeRequestBadAmountRejection': 'FundingLimitSettingsChangeRequestBadAmountRejection',
        '...on AccountHolderNotFoundRejection': 'AccountHolderNotFoundRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    AddFundingLimitSettingsChangeRequestSuccessPayload: {
        fundingLimitSettingsChangeRequest: 'FundingLimitSettingsChangeRequest',
    },
    AddingCardsToDifferentAccountsRejection: {
        message: 'String',
    },
    AddInternalDirectDebitPaymentMandatePayload: {
        '...on AddInternalDirectDebitPaymentMandateSuccessPayload': 'AddInternalDirectDebitPaymentMandateSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on NotFoundRejection': 'NotFoundRejection',
        '...on DebtorAccountNotAllowedRejection': 'DebtorAccountNotAllowedRejection',
        '...on DebtorAccountClosedRejection': 'DebtorAccountClosedRejection',
        '...on SchemeWrongRejection': 'SchemeWrongRejection',
        '...on PaymentMandateReferenceAlreadyUsedRejection': 'PaymentMandateReferenceAlreadyUsedRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
    },
    AddInternalDirectDebitPaymentMandateSuccessPayload: {
        paymentMandate: 'InternalPaymentDirectDebitMandate',
    },
    AddMerchantProfilePayload: {
        '...on AddMerchantProfileSuccessPayload': 'AddMerchantProfileSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on AccountNotFoundRejection': 'AccountNotFoundRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    AddMerchantProfileSuccessPayload: {
        merchantProfile: 'MerchantProfile',
    },
    AddOrUpdateExternalAccountBalancePayload: {
        '...on AddOrUpdateExternalAccountBalanceSuccessPayload': 'AddOrUpdateExternalAccountBalanceSuccessPayload',
        '...on ValidationRejection': 'ValidationRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
    },
    AddOrUpdateExternalAccountBalanceSuccessPayload: {
        externalAccountBalance: 'ExternalAccountBalance',
    },
    AddReceivedInternalDirectDebitB2bMandatePayload: {
        '...on AddReceivedInternalDirectDebitB2bMandateSuccessPayload': 'AddReceivedInternalDirectDebitB2bMandateSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on PaymentMandateMandateNotFoundRejection': 'PaymentMandateMandateNotFoundRejection',
        '...on AccountHolderTypeIndividualRejection': 'AccountHolderTypeIndividualRejection',
    },
    AddReceivedInternalDirectDebitB2bMandateSuccessPayload: {
        receivedDirectDebitMandate: 'ReceivedDirectDebitMandate',
    },
    AddReceivedSepaDirectDebitB2bMandatePayload: {
        '...on AddReceivedSepaDirectDebitB2bMandateSuccessPayload': 'AddReceivedSepaDirectDebitB2bMandateSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on AccountNotFoundRejection': 'AccountNotFoundRejection',
        '...on AccountHolderTypeIndividualRejection': 'AccountHolderTypeIndividualRejection',
    },
    AddReceivedSepaDirectDebitB2bMandateSuccessPayload: {
        receivedDirectDebitMandate: 'ReceivedDirectDebitMandate',
    },
    Address: {
        addressLine1: 'String',
        addressLine2: 'String',
        city: 'String',
        postalCode: 'String',
        state: 'String',
        country: 'CCA3',
    },
    AddressInfo: {
        addressLine1: 'String',
        addressLine2: 'String',
        city: 'String',
        postalCode: 'String',
        state: 'String',
        country: 'CCA3',
    },
    AddressInformation: {
        addressLine1: 'String',
        addressLine2: 'String',
        city: 'String',
        country: 'CCA3',
        postalCode: 'String',
        state: 'String',
    },
    AddSepaDirectDebitPaymentMandatePayload: {
        '...on AddSepaDirectDebitPaymentMandateSuccessPayload': 'AddSepaDirectDebitPaymentMandateSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on NotFoundRejection': 'NotFoundRejection',
        '...on DebtorAccountNotAllowedRejection': 'DebtorAccountNotAllowedRejection',
        '...on DebtorAccountClosedRejection': 'DebtorAccountClosedRejection',
        '...on SchemeWrongRejection': 'SchemeWrongRejection',
        '...on PaymentMandateReferenceAlreadyUsedRejection': 'PaymentMandateReferenceAlreadyUsedRejection',
        '...on ValidationRejection': 'ValidationRejection',
        '...on PaymentMethodNotCompatibleRejection': 'PaymentMethodNotCompatibleRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
    },
    AddSepaDirectDebitPaymentMandateSuccessPayload: {
        paymentMandate: 'SEPAPaymentDirectDebitMandate',
    },
    AddSingleUseVirtualCardPayload: {
        '...on AddSingleUseVirtualCardSuccessForUserPayload': 'AddSingleUseVirtualCardSuccessForUserPayload',
        '...on AddSingleUseVirtualCardSuccessForProjectOwnerPayload': 'AddSingleUseVirtualCardSuccessForProjectOwnerPayload',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on AccountMembershipNotAllowedRejection': 'AccountMembershipNotAllowedRejection',
        '...on CardProductSuspendedRejection': 'CardProductSuspendedRejection',
        '...on CardProductDisabledRejection': 'CardProductDisabledRejection',
        '...on EnabledCardDesignNotFoundRejection': 'EnabledCardDesignNotFoundRejection',
        '...on MissingMandatoryFieldRejection': 'MissingMandatoryFieldRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    AddSingleUseVirtualCardsPayload: {
        '...on AddSingleUseVirtualCardsSuccessPayload': 'AddSingleUseVirtualCardsSuccessPayload',
        '...on AddingCardsToDifferentAccountsRejection': 'AddingCardsToDifferentAccountsRejection',
        '...on TooManyItemsRejection': 'TooManyItemsRejection',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on AccountMembershipNotAllowedRejection': 'AccountMembershipNotAllowedRejection',
        '...on CardProductSuspendedRejection': 'CardProductSuspendedRejection',
        '...on CardProductDisabledRejection': 'CardProductDisabledRejection',
        '...on EnabledCardDesignNotFoundRejection': 'EnabledCardDesignNotFoundRejection',
        '...on MissingMandatoryFieldRejection': 'MissingMandatoryFieldRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    AddSingleUseVirtualCardsSuccessPayload: {
        cards: 'Card',
    },
    AddSingleUseVirtualCardSuccessForProjectOwnerPayload: {
        card: 'Card',
        confidential: 'CardConfidential',
    },
    AddSingleUseVirtualCardSuccessForUserPayload: {
        card: 'Card',
    },
    AddVirtualIbanEntryPayload: {
        '...on AddVirtualIbanEntrySuccessPayload': 'AddVirtualIbanEntrySuccessPayload',
        '...on AccountNotFoundRejection': 'AccountNotFoundRejection',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    AddVirtualIbanEntrySuccessPayload: {
        virtualIbanEntry: 'VirtualIBANEntry',
    },
    AllowedValue: {
        key: 'String',
        name: 'String',
    },
    AllowSddPayload: {
        '...on AllowSddSuccessPayload': 'AllowSddSuccessPayload',
        '...on AccountNotFoundRejection': 'AccountNotFoundRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    AllowSddSuccessPayload: {
        account: 'Account',
    },
    AllowSddVirtualIbanEntryPayload: {
        '...on AllowSddVirtualIbanEntrySuccessPayload': 'AllowSddVirtualIbanEntrySuccessPayload',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    AllowSddVirtualIbanEntrySuccessPayload: {
        virtualIbanEntry: 'VirtualIBANEntry',
    },
    AlreadyValidPhysicalCardRejection: {
        message: 'String',
    },
    Amount: {
        currency: 'Currency',
        value: 'AmountValue',
    },
    AmountValue: `scalar.AmountValue`,
    ApplePayNotAllowedForProjectRejection: {
        id: 'String',
        message: 'String',
    },
    ApprovedFundingLimit: {
        instantFundingLimit: 'FundingLimitAmount',
        fundingLimit: 'FundingLimitAmount',
    },
    AuditId: `scalar.AuditId`,
    Authenticator: {
        os: 'String',
        brand: 'String',
        model: 'String',
        type: 'AuthenticatorType',
        userAgent: 'String',
        acceptLanguage: 'String',
    },
    AuthorizationId: `scalar.AuthorizationId`,
    BadAccountStatusRejection: {
        id: 'String',
        message: 'String',
    },
    BadRequestRejection: {
        message: 'String',
    },
    Balance: {
        account: 'Account',
        balances: 'AccountBalances',
        lastSctOut: 'SEPACreditTransferTransaction',
        lastSctIn: 'SEPACreditTransferTransaction',
    },
    Bank: {
        name: 'String',
        branch: 'String',
        nationalId: 'String',
        bic: 'BIC',
        address: 'Address',
    },
    BasicPhysicalCardInfo: {
        expiryDate: 'String',
        offlineSpendingLimit: 'Amount',
        cardMaskedNumber: 'String',
        customOptions: 'PhysicalCardCustomOptions',
    },
    BeneficiaryMatch: {
        accountStatus: 'BeneficiaryAccountStatus',
        accountHolderType: 'BeneficiaryAccountHolderType',
    },
    BeneficiaryMismatch: {
        accountStatus: 'BeneficiaryAccountStatus',
        accountHolderType: 'BeneficiaryAccountHolderType',
        nameSuggestion: 'String',
        accountHolderResidencyCity: 'String',
    },
    BeneficiaryTypo: {
        accountStatus: 'BeneficiaryAccountStatus',
        accountHolderType: 'BeneficiaryAccountHolderType',
        nameSuggestion: 'String',
    },
    BeneficiaryVerificationResult: {
        '...on BeneficiaryMatch': 'BeneficiaryMatch',
        '...on BeneficiaryTypo': 'BeneficiaryTypo',
        '...on BeneficiaryMismatch': 'BeneficiaryMismatch',
        '...on InvalidBeneficiaryVerification': 'InvalidBeneficiaryVerification',
    },
    BIC: `scalar.BIC`,
    BindAccountMembershipPayload: {
        '...on BindAccountMembershipSuccessPayload': 'BindAccountMembershipSuccessPayload',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on AccountMembershipNotFoundRejection': 'AccountMembershipNotFoundRejection',
        '...on AccountMembershipNotReadyToBeBoundRejection': 'AccountMembershipNotReadyToBeBoundRejection',
        '...on IdentityAlreadyBindToAccountMembershipRejection': 'IdentityAlreadyBindToAccountMembershipRejection',
        '...on RestrictedToUserRejection': 'RestrictedToUserRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    BindAccountMembershipSuccessPayload: {
        accountMembership: 'AccountMembership',
    },
    BookedTransactionStatusInfo: {
        status: 'TransactionStatus',
        bookingDate: 'DateTime',
        valueDate: 'DateTime',
    },
    CancelCardPayload: {
        '...on CancelCardSuccessPayload': 'CancelCardSuccessPayload',
        '...on AccountMembershipNotAllowedRejection': 'AccountMembershipNotAllowedRejection',
        '...on CardNotFoundRejection': 'CardNotFoundRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    CancelCardSuccessPayload: {
        card: 'Card',
    },
    CancelConsentPayload: {
        '...on CancelConsentSuccessPayload': 'CancelConsentSuccessPayload',
        '...on ConsentNotFoundRejection': 'ConsentNotFoundRejection',
        '...on NotReachableConsentStatusRejection': 'NotReachableConsentStatusRejection',
    },
    CancelConsentSuccessPayload: {
        consent: 'Consent',
    },
    CancelDigitalCardPayload: {
        '...on CancelDigitalCardSuccessPayload': 'CancelDigitalCardSuccessPayload',
        '...on AccountMembershipNotAllowedRejection': 'AccountMembershipNotAllowedRejection',
        '...on CardNotFoundRejection': 'CardNotFoundRejection',
        '...on DigitalCardNotFoundRejection': 'DigitalCardNotFoundRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    CancelDigitalCardSuccessPayload: {
        digitalCard: 'DigitalCard',
    },
    CanceledFundingSourceStatusInfo: {
        status: 'FundingSourceStatus',
        enabledAt: 'Date',
        canceledAt: 'Date',
        reasonCode: 'CanceledFundingSourceReason',
    },
    CanceledIdentificationLevelStatusInfo: {
        status: 'SwanIdentificationStatus',
    },
    CanceledMerchantPaymentMethodStatusInfo: {
        status: 'MerchantPaymentMethodStatus',
        canceledAt: 'Date',
    },
    CanceledMerchantProfileStatusInfo: {
        status: 'MerchantProfileStatus',
        canceledAt: 'Date',
        enabledAt: 'Date',
    },
    CanceledTransactionStatusInfo: {
        status: 'TransactionStatus',
        canceledDate: 'DateTime',
    },
    CancelFundingSourcePayload: {
        '...on CancelFundingSourceSuccessPayload': 'CancelFundingSourceSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on NotFoundRejection': 'NotFoundRejection',
    },
    CancelFundingSourceSuccessPayload: {
        fundingSource: 'FundingSource',
    },
    CancelPhysicalCardPayload: {
        '...on CancelPhysicalCardSuccessPayload': 'CancelPhysicalCardSuccessPayload',
        '...on AccountMembershipNotAllowedRejection': 'AccountMembershipNotAllowedRejection',
        '...on CardNotFoundRejection': 'CardNotFoundRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on PhysicalCardNotFoundRejection': 'PhysicalCardNotFoundRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    CancelPhysicalCardSuccessPayload: {
        physicalCard: 'PhysicalCard',
    },
    CancelStandingOrderPayload: {
        '...on CancelStandingOrderSuccessPayload': 'CancelStandingOrderSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on StandingOrderNotFoundRejection': 'StandingOrderNotFoundRejection',
    },
    CancelStandingOrderSuccessPayload: {
        standingOrder: 'StandingOrder',
    },
    CancelTransactionPayload: {
        '...on CancelTransactionSuccessPayload': 'CancelTransactionSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
    },
    CancelTransactionSuccessPayload: {
        message: 'String',
    },
    CancelVirtualIbanEntryPayload: {
        '...on CancelVirtualIbanEntrySuccessPayload': 'CancelVirtualIbanEntrySuccessPayload',
        '...on AccountNotFoundRejection': 'AccountNotFoundRejection',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    CancelVirtualIbanEntrySuccessPayload: {
        virtualIbanEntry: 'VirtualIBANEntry',
    },
    CannotActivatePhysicalCardRejection: {
        message: 'String',
        identifier: 'String',
    },
    CapitalDepositCase: {
        id: 'String',
        shareholders: 'Shareholder',
        totalCapitalDepositAmount: 'Amount',
        companyName: 'String',
        companyOnboarding: 'Onboarding',
        companyAccountId: 'String',
        status: 'CapitalDepositCaseStatus',
        documents: 'CapitalDepositDocument',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
    },
    CapitalDepositCaseConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'CapitalDepositCaseEdge',
    },
    CapitalDepositCaseEdge: {
        cursor: 'String',
        node: 'CapitalDepositCase',
    },
    CapitalDepositDocument: {
        id: 'String',
        type: 'CapitalDepositDocumentType',
        downloadUrl: 'String',
        uploadedAt: 'Date',
        status: 'CapitalDepositDocumentStatus',
        statusInfo: 'CapitalDepositDocumentStatusInfo',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        relatedCapitalDepositCase: 'CapitalDepositCase',
        relatedShareholder: 'Shareholder',
    },
    CapitalDepositDocumentCanNotBeUploaded: {
        id: 'String',
        message: 'String',
    },
    CapitalDepositDocumentCanNotBeUploadedRejection: {
        id: 'String',
        message: 'String',
    },
    CapitalDepositDocumentPendingStatusInfo: {
        status: 'CapitalDepositDocumentStatus',
    },
    CapitalDepositDocumentRefusedStatusInfo: {
        status: 'CapitalDepositDocumentStatus',
        reasonCode: 'DocumentReasonCode',
    },
    CapitalDepositDocumentStatusInfo: {
        '...on CapitalDepositDocumentPendingStatusInfo': 'CapitalDepositDocumentPendingStatusInfo',
        '...on CapitalDepositDocumentRefusedStatusInfo': 'CapitalDepositDocumentRefusedStatusInfo',
        '...on CapitalDepositDocumentUploadedStatusInfo': 'CapitalDepositDocumentUploadedStatusInfo',
        '...on CapitalDepositDocumentValidatedStatusInfo': 'CapitalDepositDocumentValidatedStatusInfo',
        status: 'CapitalDepositDocumentStatus',
    },
    CapitalDepositDocumentUploadedStatusInfo: {
        status: 'CapitalDepositDocumentStatus',
    },
    CapitalDepositDocumentValidatedStatusInfo: {
        status: 'CapitalDepositDocumentStatus',
    },
    Card: {
        id: 'ID',
        type: 'CardType',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        accountMembership: 'AccountMembership',
        mainCurrency: 'Currency',
        cardContractExpiryDate: 'DateTime',
        cardDesignUrl: 'String',
        cardUrl: 'String',
        statusInfo: 'CardStatusInfo',
        withdrawal: 'Boolean',
        international: 'Boolean',
        nonMainCurrencyTransactions: 'Boolean',
        eCommerce: 'Boolean',
        spendingLimits: 'SpendingLimit',
        physicalCard: 'PhysicalCard',
        cardMaskedNumber: 'String',
        expiryDate: 'String',
        name: 'String',
        cardProduct: 'CardProduct',
        issuingCountry: 'CCA3',
        digitalCards: 'DigitalCardConnection',
        transactions: 'TransactionConnection',
        spending: 'Spending',
    },
    CardCanceledStatusInfo: {
        status: 'CardStatus',
        reason: 'String',
    },
    CardCancelingStatusInfo: {
        status: 'CardStatus',
        reason: 'String',
    },
    CardCanNotBeDigitalizedRejection: {
        id: 'String',
        message: 'String',
    },
    CardConfidential: {
        pan: 'String',
        cvv: 'String',
        expiryDate: 'String',
    },
    CardConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'CardEdge',
    },
    CardConsentPendingStatusInfo: {
        status: 'CardStatus',
        consent: 'Consent',
    },
    CardDesignBackground: {
        id: 'ID',
        name: 'String',
        type: 'String',
        cardTextColor: 'String',
        cardBackgroundUrl: 'String',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
    },
    CardEdge: {
        cursor: 'String',
        node: 'Card',
    },
    CardEnabledStatusInfo: {
        status: 'CardStatus',
    },
    CardMerchantPaymentMethod: {
        id: 'ID',
        type: 'MerchantPaymentMethodType',
        methodId: 'ID',
        statusInfo: 'MerchantPaymentMethodStatusInfo',
        version: 'Int',
        updatedAt: 'Date',
        rollingReserve: 'RollingReserve',
    },
    CardNotFoundRejection: {
        id: 'String',
        message: 'String',
    },
    CardProcessingStatusInfo: {
        status: 'CardStatus',
    },
    CardProduct: {
        id: 'ID',
        name: 'String',
        projectId: 'ID',
        status: 'CardProductStatus',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        applicableToPhysicalCards: 'Boolean',
        cardDesigns: 'CardProductDesign',
        defaultCardProduct: 'Boolean',
        individualSpendingLimit: 'SpendingLimit',
        companySpendingLimit: 'SpendingLimit',
    },
    CardProductDesign: {
        id: 'ID',
        version: 'Int',
        cardProjectLogoSvgUrl: 'String',
        cardProjectLogo300dpiUrl: 'String',
        cardProjectLogo600dpiUrl: 'String',
        zoomRatioProjectLogo: 'Int',
        cardDesignUrl: 'String',
        accentColor: 'String',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        status: 'CardDesignStatus',
        cardBackground: 'CardDesignBackground',
    },
    CardProductDisabledRejection: {
        message: 'String',
    },
    CardProductNotApplicableToPhysicalCardsRejection: {
        message: 'String',
    },
    CardProductNotFoundRejection: {
        message: 'String',
    },
    CardProductSuspendedRejection: {
        message: 'String',
    },
    CardProductUsedRejection: {
        message: 'String',
    },
    CardSettings: {
        id: 'ID',
        allowsApplePay: 'Boolean',
        version: 'Int',
        cardProjectLogoSvgUrl: 'String',
        cardProjectLogo300dpiUrl: 'String',
        cardProjectLogo600dpiUrl: 'String',
        zoomRatioProjectLogo: 'Int',
        cardDesignUrl: 'String',
        accentColor: 'String',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        status: 'ProjectCardStatus',
        cardBackground: 'CardSettingsBackground',
    },
    CardSettingsBackground: {
        id: 'ID',
        name: 'String',
        type: 'String',
        cardTextColor: 'String',
        cardBackgroundUrl: 'String',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
    },
    CardStatusInfo: {
        '...on CardCanceledStatusInfo': 'CardCanceledStatusInfo',
        '...on CardCancelingStatusInfo': 'CardCancelingStatusInfo',
        '...on CardConsentPendingStatusInfo': 'CardConsentPendingStatusInfo',
        '...on CardEnabledStatusInfo': 'CardEnabledStatusInfo',
        '...on CardProcessingStatusInfo': 'CardProcessingStatusInfo',
        status: 'CardStatus',
    },
    CardToken: `scalar.CardToken`,
    CardTransaction: {
        id: 'ID',
        reference: 'String',
        paymentMethodIdentifier: 'String',
        side: 'TransactionSide',
        type: 'TransactionTypeEnum',
        amount: 'Amount',
        label: 'String',
        statusInfo: 'TransactionStatusInfo',
        paymentId: 'String',
        payment: 'Payment',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        counterparty: 'String',
        bookedBalanceAfter: 'Amount',
        paymentProduct: 'PaymentProduct',
        maskedPan: 'String',
        cardId: 'String',
        card: 'Card',
        terminalId: 'String',
        originalAmount: 'Amount',
        currencyExchange: 'ReportExchangeRate',
        merchantId: 'String',
        merchantName: 'String',
        merchantCity: 'String',
        merchantCountry: 'CCA3',
        merchantPostalCode: 'String',
        merchantCategoryCode: 'String',
        merchantCategoryDescription: 'MerchantCategoryDescription',
        category: 'Category',
        authorizationType: 'AuthorizationType',
        account: 'Account',
        externalReference: 'String',
        executionDate: 'DateTime',
        requestedExecutionAt: 'DateTime',
        originTransactionId: 'String',
        originTransaction: 'Transaction',
    },
    CardWrongStatusRejection: {
        message: 'String',
        identifier: 'String',
        currentStatus: 'CardStatus',
        expectedStatus: 'CardStatus',
    },
    CCA2: `scalar.CCA2`,
    CCA3: `scalar.CCA3`,
    CheckMerchantPaymentMethod: {
        id: 'ID',
        type: 'MerchantPaymentMethodType',
        methodId: 'ID',
        statusInfo: 'MerchantPaymentMethodStatusInfo',
        version: 'Int',
        updatedAt: 'Date',
        rollingReserve: 'RollingReserve',
    },
    CheckRejection: {
        message: 'String',
        fnciInfo: 'FnciInfo',
    },
    CheckTransaction: {
        id: 'ID',
        reference: 'String',
        paymentMethodIdentifier: 'String',
        cmc7: 'String',
        rlmcKey: 'String',
        side: 'TransactionSide',
        type: 'TransactionTypeEnum',
        amount: 'Amount',
        label: 'String',
        statusInfo: 'TransactionStatusInfo',
        paymentId: 'String',
        payment: 'Payment',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        counterparty: 'String',
        bookedBalanceAfter: 'Amount',
        paymentProduct: 'PaymentProduct',
        account: 'Account',
        externalReference: 'String',
        executionDate: 'DateTime',
        requestedExecutionAt: 'DateTime',
        originTransactionId: 'String',
        originTransaction: 'Transaction',
        reservedAmount: 'Amount',
        reservedAmountReleasedAt: 'DateTime',
        returnReason: 'TransactionReasonCode',
    },
    CloseAccountPayload: {
        '...on CloseAccountSuccessPayload': 'CloseAccountSuccessPayload',
        '...on AccountNotFoundRejection': 'AccountNotFoundRejection',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    CloseAccountReason: {
        type: 'CloseAccountReasonType',
        message: 'String',
    },
    CloseAccountStatusReason: {
        '...on CloseAccountReason': 'CloseAccountReason',
    },
    CloseAccountSuccessPayload: {
        consent: 'Consent',
    },
    CompanyInfo: {
        siren: 'String',
        companyName: 'String',
        headquarters: 'Headquarters',
        vatNumber: 'String',
        taxIdentificationNumber: 'String',
        legalRepresentativePersonalAddress: 'AddressInformation',
    },
    CompanyShareholder: {
        type: 'ShareholderType',
        name: 'String',
    },
    CompleteDigitalCard: {
        id: 'ID',
        type: 'DigitalizationType',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        walletProvider: 'WalletProvider',
        device: 'Device',
        walletId: 'String',
        cardMaskedNumber: 'String',
        statusInfo: 'CompleteDigitalCardStatusInfo',
    },
    CompleteDigitalCardStatusInfo: {
        '...on DigitalCardCanceledStatusInfo': 'DigitalCardCanceledStatusInfo',
        '...on DigitalCardEnabledStatusInfo': 'DigitalCardEnabledStatusInfo',
        '...on DigitalCardSuspendedStatusInfo': 'DigitalCardSuspendedStatusInfo',
        status: 'CompleteDigitalCardStatus',
    },
    CompletedMerchantPaymentLinkStatusInfo: {
        status: 'MerchantPaymentLinkStatus',
        completedAt: 'DateTime',
    },
    ConfirmPhysicalCardRenewalPayload: {
        '...on ConfirmPhysicalCardRenewalSuccessPayload': 'ConfirmPhysicalCardRenewalSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on CardNotFoundRejection': 'CardNotFoundRejection',
        '...on ValidationRejection': 'ValidationRejection',
        '...on PhysicalCardWrongStatusRejection': 'PhysicalCardWrongStatusRejection',
    },
    ConfirmPhysicalCardRenewalSuccessPayload: {
        physicalCard: 'PhysicalCard',
    },
    Connection: {
        '...on AccountConnection': 'AccountConnection',
        '...on AccountHolderConnection': 'AccountHolderConnection',
        '...on AccountMembershipConnection': 'AccountMembershipConnection',
        '...on CapitalDepositCaseConnection': 'CapitalDepositCaseConnection',
        '...on CardConnection': 'CardConnection',
        '...on ConsentConnection': 'ConsentConnection',
        '...on DigitalCardConnection': 'DigitalCardConnection',
        '...on ExternalAccountConnection': 'ExternalAccountConnection',
        '...on ExternalBalanceConnection': 'ExternalBalanceConnection',
        '...on FundingLimitSettingsChangeRequestConnection': 'FundingLimitSettingsChangeRequestConnection',
        '...on FundingSourceConnection': 'FundingSourceConnection',
        '...on InvoiceConnection': 'InvoiceConnection',
        '...on LegalDocumentConnection': 'LegalDocumentConnection',
        '...on MerchantProfileConnection': 'MerchantProfileConnection',
        '...on OnboardingConnection': 'OnboardingConnection',
        '...on PaymentConnection': 'PaymentConnection',
        '...on PaymentMandateConnection': 'PaymentMandateConnection',
        '...on ReceivedDirectDebitMandateConnection': 'ReceivedDirectDebitMandateConnection',
        '...on StandingOrderConnection': 'StandingOrderConnection',
        '...on StatementConnection': 'StatementConnection',
        '...on SupportingDocumentCollectionConnection': 'SupportingDocumentCollectionConnection',
        '...on TransactionConnection': 'TransactionConnection',
        '...on TrustedBeneficiaryConnection': 'TrustedBeneficiaryConnection',
        '...on UserConnection': 'UserConnection',
        '...on VirtualIBANEntryConnection': 'VirtualIBANEntryConnection',
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'Edge',
    },
    Consent: {
        id: 'ID',
        requireSCA: 'Boolean',
        status: 'ConsentStatus',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        startedAt: 'DateTime',
        expiredAt: 'DateTime',
        purpose: 'ConsentPurpose',
        consentUrl: 'String',
        redirectUrl: 'String',
        userId: 'String',
        user: 'User',
        challenge: 'String',
    },
    ConsentConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'ConsentEdge',
    },
    ConsentEdge: {
        cursor: 'String',
        node: 'Consent',
    },
    ConsentNotFoundRejection: {
        message: 'String',
        consentId: 'String',
    },
    ConsentsAlreadyLinkedToMultiConsentRejection: {
        message: 'String',
        consentIds: 'String',
    },
    ConsentsNotAllInCreatedStatusRejection: {
        message: 'String',
        consentIds: 'String',
    },
    ConsentsNotFoundRejection: {
        message: 'String',
        ids: 'String',
    },
    ConsentTypeNotSupportedByServerConsentRejection: {
        message: 'String',
    },
    CreateCapitalDepositCasePayload: {
        '...on CreateCapitalDepositCaseSuccessPayload': 'CreateCapitalDepositCaseSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on BadRequestRejection': 'BadRequestRejection',
        '...on ValidationRejection': 'ValidationRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
    },
    CreateCapitalDepositCaseSuccessPayload: {
        capitalDepositCase: 'CapitalDepositCase',
    },
    CreateMerchantPaymentLinkPayload: {
        '...on CreateMerchantPaymentLinkSuccessPayload': 'CreateMerchantPaymentLinkSuccessPayload',
        '...on MerchantProfileWrongStatusRejection': 'MerchantProfileWrongStatusRejection',
        '...on MerchantPaymentMethodNotActiveRejection': 'MerchantPaymentMethodNotActiveRejection',
        '...on PaymentMethodNotCompatibleRejection': 'PaymentMethodNotCompatibleRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    CreateMerchantPaymentLinkSuccessPayload: {
        merchantPaymentLink: 'MerchantPaymentLink',
    },
    CreateMultiConsentPayload: {
        '...on CreateMultiConsentSuccessPayload': 'CreateMultiConsentSuccessPayload',
        '...on ConsentsNotAllInCreatedStatusRejection': 'ConsentsNotAllInCreatedStatusRejection',
        '...on ConsentsNotFoundRejection': 'ConsentsNotFoundRejection',
        '...on TooManyChildConsentsRejection': 'TooManyChildConsentsRejection',
        '...on ConsentsAlreadyLinkedToMultiConsentRejection': 'ConsentsAlreadyLinkedToMultiConsentRejection',
    },
    CreateMultiConsentSuccessPayload: {
        consent: 'Consent',
    },
    CsvStatement: {
        type: 'StatementType',
        url: 'String',
        expiresAt: 'DateTime',
    },
    Currency: `scalar.Currency`,
    Customer: {
        externalCustomerId: 'String',
        name: 'String',
        iban: 'String',
    },
    Date: `scalar.Date`,
    DateField: {
        example: 'String',
        key: 'String',
        name: 'String',
        required: 'Boolean',
        validationRegex: 'String',
    },
    DateTime: `scalar.DateTime`,
    DebtorAccountClosedRejection: {
        message: 'String',
    },
    DebtorAccountNotAllowedRejection: {
        message: 'String',
    },
    DeleteSupportingDocumentPayload: {
        '...on DeleteSupportingDocumentSuccessPayload': 'DeleteSupportingDocumentSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on SupportingDocumentCollectionNotFoundRejection': 'SupportingDocumentCollectionNotFoundRejection',
        '...on SupportingDocumentCollectionStatusDoesNotAllowDeletionRejection': 'SupportingDocumentCollectionStatusDoesNotAllowDeletionRejection',
        '...on SupportingDocumentNotFoundRejection': 'SupportingDocumentNotFoundRejection',
        '...on SupportingDocumentStatusDoesNotAllowDeletionRejection': 'SupportingDocumentStatusDoesNotAllowDeletionRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    DeleteSupportingDocumentSuccessPayload: {
        id: 'String',
    },
    DenySddPayload: {
        '...on DenySddSuccessPayload': 'DenySddSuccessPayload',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on AccountNotFoundRejection': 'AccountNotFoundRejection',
        '...on InvalidArgumentRejection': 'InvalidArgumentRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    DenySddSuccessPayload: {
        account: 'Account',
    },
    DenySddVirtualIbanEntryPayload: {
        '...on DenySddVirtualIbanEntrySuccessPayload': 'DenySddVirtualIbanEntrySuccessPayload',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    DenySddVirtualIbanEntrySuccessPayload: {
        virtualIbanEntry: 'VirtualIBANEntry',
    },
    Device: {
        type: 'String',
        name: 'String',
        SEID: 'String',
    },
    DigitalCard: {
        '...on CompleteDigitalCard': 'CompleteDigitalCard',
        '...on PendingDigitalCard': 'PendingDigitalCard',
        id: 'ID',
        type: 'DigitalizationType',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        walletProvider: 'WalletProvider',
    },
    DigitalCardCanceledStatusInfo: {
        status: 'CompleteDigitalCardStatus',
        enabledAt: 'DateTime',
        canceledAt: 'DateTime',
    },
    DigitalCardConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'DigitalCardEdge',
    },
    DigitalCardConsentPendingStatusInfo: {
        status: 'PendingDigitalCardStatus',
        consent: 'Consent',
    },
    DigitalCardDeclinedStatusInfo: {
        status: 'PendingDigitalCardStatus',
    },
    DigitalCardEdge: {
        cursor: 'String',
        node: 'DigitalCard',
    },
    DigitalCardEnabledStatusInfo: {
        status: 'CompleteDigitalCardStatus',
        enabledAt: 'DateTime',
    },
    DigitalCardNotFoundRejection: {
        message: 'String',
        identifier: 'String',
    },
    DigitalCardPendingStatusInfo: {
        status: 'PendingDigitalCardStatus',
    },
    DigitalCardSuspendedStatusInfo: {
        status: 'CompleteDigitalCardStatus',
        enabledAt: 'DateTime',
        suspendedAt: 'DateTime',
    },
    DirectDebitAccountVerification: {
        createdAt: 'DateTime',
        iban: 'IBAN',
        id: 'ID',
        statusInfo: 'AccountVerificationStatusInfo',
        updatedAt: 'DateTime',
    },
    DirectDebitFundingSource: {
        id: 'ID',
        name: 'String',
        statusInfo: 'FundingSourceStatusInfo',
        iban: 'IBAN',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        accountVerification: 'DirectDebitAccountVerification',
        paymentMandate: 'PaymentDirectDebitMandate',
    },
    DisableAccountMembershipPayload: {
        '...on DisableAccountMembershipSuccessPayload': 'DisableAccountMembershipSuccessPayload',
        '...on AccountMembershipCannotBeDisabledRejection': 'AccountMembershipCannotBeDisabledRejection',
        '...on AccountMembershipNotFoundRejection': 'AccountMembershipNotFoundRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on LegalRepresentativeAccountMembershipCannotBeDisabledRejection': 'LegalRepresentativeAccountMembershipCannotBeDisabledRejection',
        '...on UserNotAllowedToDisableItsOwnAccountMembershipRejection': 'UserNotAllowedToDisableItsOwnAccountMembershipRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    DisableAccountMembershipSuccessPayload: {
        accountMembership: 'AccountMembership',
    },
    DisabledFundingLimitSettingsStatusInfo: {
        status: 'FundingLimitSettingsStatus',
        reason: 'String',
    },
    DisabledMerchantPaymentMethodStatusInfo: {
        status: 'MerchantPaymentMethodStatus',
        disabledAt: 'Date',
    },
    DocumentFile: {
        '...on DriversLicenseDocumentFile': 'DriversLicenseDocumentFile',
        '...on IdCardDocumentFile': 'IdCardDocumentFile',
        '...on PassportDocumentFile': 'PassportDocumentFile',
        '...on ReportDocumentFile': 'ReportDocumentFile',
        '...on ResidencePermitDocumentFile': 'ResidencePermitDocumentFile',
        downloadUrl: 'String',
    },
    DriversLicenseDocument: {
        id: 'String',
        type: 'DocumentType',
        files: 'DriversLicenseDocumentFile',
    },
    DriversLicenseDocumentFile: {
        downloadUrl: 'String',
        side: 'DocumentFileSide',
    },
    Edge: {
        '...on AccountEdge': 'AccountEdge',
        '...on AccountHolderEdge': 'AccountHolderEdge',
        '...on AccountMembershipEdge': 'AccountMembershipEdge',
        '...on CapitalDepositCaseEdge': 'CapitalDepositCaseEdge',
        '...on CardEdge': 'CardEdge',
        '...on ConsentEdge': 'ConsentEdge',
        '...on DigitalCardEdge': 'DigitalCardEdge',
        '...on ExternalAccountEdge': 'ExternalAccountEdge',
        '...on ExternalBalanceEdge': 'ExternalBalanceEdge',
        '...on FundingLimitSettingsChangeRequestEdge': 'FundingLimitSettingsChangeRequestEdge',
        '...on FundingSourceEdge': 'FundingSourceEdge',
        '...on IdentificationEdge': 'IdentificationEdge',
        '...on InvoiceEdge': 'InvoiceEdge',
        '...on LegalDocumentEdge': 'LegalDocumentEdge',
        '...on MerchantProfileEdge': 'MerchantProfileEdge',
        '...on OnboardingEdge': 'OnboardingEdge',
        '...on PaymentEdge': 'PaymentEdge',
        '...on PaymentMandateEdge': 'PaymentMandateEdge',
        '...on ReceivedDirectDebitMandateEdge': 'ReceivedDirectDebitMandateEdge',
        '...on StandingOrderEdge': 'StandingOrderEdge',
        '...on StatementEdge': 'StatementEdge',
        '...on SupportingDocumentCollectionEdge': 'SupportingDocumentCollectionEdge',
        '...on TransactionEdge': 'TransactionEdge',
        '...on TrustedBeneficiaryEdge': 'TrustedBeneficiaryEdge',
        '...on UserEdge': 'UserEdge',
        '...on VirtualIBANEntryEdge': 'VirtualIBANEntryEdge',
        cursor: 'String',
    },
    EmailAddress: `scalar.EmailAddress`,
    EnabledCardDesignNotFoundRejection: {
        message: 'String',
    },
    EnabledFundingLimitSettingsStatusInfo: {
        status: 'FundingLimitSettingsStatus',
    },
    EnabledFundingSourceStatusInfo: {
        status: 'FundingSourceStatus',
        enabledAt: 'Date',
    },
    EnabledMerchantPaymentMethodStatusInfo: {
        status: 'MerchantPaymentMethodStatus',
        enabledAt: 'Date',
    },
    EnabledMerchantProfileStatusInfo: {
        status: 'MerchantProfileStatus',
        enabledAt: 'Date',
    },
    EnableReceivedDirectDebitMandatePayload: {
        '...on EnableReceivedDirectDebitMandateSuccessPayload': 'EnableReceivedDirectDebitMandateSuccessPayload',
        '...on ReceivedDirectDebitMandateNotFoundRejection': 'ReceivedDirectDebitMandateNotFoundRejection',
        '...on ReceivedDirectDebitMandateCanceledRejection': 'ReceivedDirectDebitMandateCanceledRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
    },
    EnableReceivedDirectDebitMandateSuccessPayload: {
        receivedDirectDebitMandate: 'ReceivedDirectDebitMandate',
    },
    ExpiredIdentificationLevelStatusInfo: {
        status: 'SwanIdentificationStatus',
        expiredAt: 'Date',
    },
    ExpiredMerchantPaymentLinkStatusInfo: {
        status: 'MerchantPaymentLinkStatus',
        expiredAt: 'DateTime',
    },
    ExternalAccount: {
        id: 'ID',
        externalId: 'String',
        name: 'String',
        cashAccountType: 'CashAccountType',
        BIC: 'BIC',
        IBAN: 'IBAN',
        currency: 'Currency',
        holderName: 'String',
        country: 'CCA3',
        originalCreatedAt: 'DateTime',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        balances: 'ExternalBalanceConnection',
        source: 'ExternalAccountDataSource',
        institution: 'FinancialInstitution',
        usage: 'ExternalAccountUsage',
        accountHolder: 'AccountHolder',
    },
    ExternalAccountAlreadyExistsRejection: {
        iban: 'String',
        accountHolderId: 'String',
        message: 'String',
    },
    ExternalAccountBalance: {
        id: 'ID',
        amount: 'Amount',
        type: 'ExternalAccountBalanceType',
        lastChangedAt: 'DateTime',
    },
    ExternalAccountBalanceAlreadyExistsRejection: {
        type: 'ExternalAccountBalanceType',
        lastChangedAt: 'DateTime',
        message: 'String',
    },
    ExternalAccountConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'ExternalAccountEdge',
    },
    ExternalAccountDataSource: {
        type: 'ExternalAccountDataSourceType',
        name: 'String',
    },
    ExternalAccountEdge: {
        cursor: 'String',
        node: 'ExternalAccount',
    },
    ExternalBalanceConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'ExternalBalanceEdge',
    },
    ExternalBalanceEdge: {
        cursor: 'String',
        node: 'ExternalAccountBalance',
    },
    FacePhotoDocument: {
        id: 'String',
        type: 'DocumentType',
    },
    FeeCreditor: {
        '...on FeeInCreditor': 'FeeInCreditor',
        '...on FeeOutCreditor': 'FeeOutCreditor',
        name: 'String',
        accountNumber: 'AccountNumber',
    },
    FeeDebtor: {
        '...on FeeInDebtor': 'FeeInDebtor',
        '...on FeeOutDebtor': 'FeeOutDebtor',
        name: 'String',
        accountNumber: 'AccountNumber',
    },
    FeeInCreditor: {
        name: 'String',
        accountNumber: 'AccountNumber',
    },
    FeeInDebtor: {
        name: 'String',
        accountNumber: 'AccountNumber',
    },
    FeeOutCreditor: {
        name: 'String',
        accountNumber: 'AccountNumber',
    },
    FeeOutDebtor: {
        name: 'String',
        accountNumber: 'AccountNumber',
    },
    FeeSettingsNotFoundRejection: {
        message: 'String',
    },
    FeeTransaction: {
        id: 'ID',
        reference: 'String',
        paymentMethodIdentifier: 'String',
        side: 'TransactionSide',
        type: 'TransactionTypeEnum',
        amount: 'Amount',
        label: 'String',
        feesType: 'FeesTypeEnum',
        statusInfo: 'TransactionStatusInfo',
        paymentId: 'String',
        payment: 'Payment',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        counterparty: 'String',
        bookedBalanceAfter: 'Amount',
        paymentProduct: 'PaymentProduct',
        creditor: 'FeeCreditor',
        debtor: 'FeeDebtor',
        account: 'Account',
        externalReference: 'String',
        executionDate: 'DateTime',
        requestedExecutionAt: 'DateTime',
        originTransactionId: 'String',
        originTransaction: 'Transaction',
    },
    Field: {
        '...on DateField': 'DateField',
        '...on RadioField': 'RadioField',
        '...on SelectField': 'SelectField',
        '...on TextField': 'TextField',
        key: 'String',
        name: 'String',
        required: 'Boolean',
    },
    FinalizeOnboardingPayload: {
        '...on FinalizeOnboardingSuccessPayload': 'FinalizeOnboardingSuccessPayload',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on OnboardingNotCompletedRejection': 'OnboardingNotCompletedRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    FinalizeOnboardingSuccessPayload: {
        onboarding: 'Onboarding',
    },
    FinancialInstitution: {
        id: 'ID',
        name: 'String',
        country: 'CCA3',
    },
    FnciInfo: {
        colorCode: 'String',
        cpt1: 'Int',
        cpt2: 'Int',
        cpt3: 'Int',
        holderEstablishment: 'String',
        responseCode: 'Int',
    },
    ForbiddenRejection: {
        message: 'String',
    },
    FundingLimit: {
        amount: 'Amount',
        funding: 'Amount',
        rollingDays: 'Int',
    },
    FundingLimitAmount: {
        amount: 'Amount',
    },
    FundingLimitExceededRejection: {
        message: 'String',
    },
    FundingLimitSettings: {
        instantFundingLimit: 'InstantFundingLimit',
        fundingLimit: 'FundingLimit',
        fundingLimitSettingsChangeRequest: 'FundingLimitSettingsChangeRequest',
        statusInfo: 'FundingLimitSettingsStatusInfo',
    },
    FundingLimitSettingsChangeRequest: {
        id: 'ID',
        instantFundingLimit: 'FundingLimitAmount',
        fundingLimit: 'FundingLimitAmount',
        approved: 'ApprovedFundingLimit',
        statusInfo: 'FundingLimitSettingsChangeRequestStatusInfo',
        createdAt: 'Date',
        updatedAt: 'Date',
    },
    FundingLimitSettingsChangeRequestApprovedStatusInfo: {
        status: 'FundingLimitSettingsChangeRequestStatus',
        reason: 'String',
    },
    FundingLimitSettingsChangeRequestBadAmountRejection: {
        message: 'String',
    },
    FundingLimitSettingsChangeRequestConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'FundingLimitSettingsChangeRequestEdge',
    },
    FundingLimitSettingsChangeRequestEdge: {
        cursor: 'String',
        node: 'FundingLimitSettingsChangeRequest',
    },
    FundingLimitSettingsChangeRequestPendingStatusInfo: {
        status: 'FundingLimitSettingsChangeRequestStatus',
    },
    FundingLimitSettingsChangeRequestRefusedStatusInfo: {
        status: 'FundingLimitSettingsChangeRequestStatus',
        reason: 'String',
    },
    FundingLimitSettingsChangeRequestStatusInfo: {
        '...on FundingLimitSettingsChangeRequestApprovedStatusInfo': 'FundingLimitSettingsChangeRequestApprovedStatusInfo',
        '...on FundingLimitSettingsChangeRequestPendingStatusInfo': 'FundingLimitSettingsChangeRequestPendingStatusInfo',
        '...on FundingLimitSettingsChangeRequestRefusedStatusInfo': 'FundingLimitSettingsChangeRequestRefusedStatusInfo',
        '...on FundingLimitSettingsChangeRequestWaitingForInformationStatusInfo': 'FundingLimitSettingsChangeRequestWaitingForInformationStatusInfo',
        status: 'FundingLimitSettingsChangeRequestStatus',
    },
    FundingLimitSettingsChangeRequestWaitingForInformationStatusInfo: {
        status: 'FundingLimitSettingsChangeRequestStatus',
    },
    FundingLimitSettingsStatusInfo: {
        '...on DisabledFundingLimitSettingsStatusInfo': 'DisabledFundingLimitSettingsStatusInfo',
        '...on EnabledFundingLimitSettingsStatusInfo': 'EnabledFundingLimitSettingsStatusInfo',
        '...on SuspendedFundingLimitSettingsStatusInfo': 'SuspendedFundingLimitSettingsStatusInfo',
        status: 'FundingLimitSettingsStatus',
    },
    FundingSource: {
        '...on DirectDebitFundingSource': 'DirectDebitFundingSource',
        id: 'ID',
        name: 'String',
        statusInfo: 'FundingSourceStatusInfo',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
    },
    FundingSourceConnection: {
        pageInfo: 'PageInfo',
        edges: 'FundingSourceEdge',
        totalCount: 'Int',
    },
    FundingSourceEdge: {
        node: 'FundingSource',
        cursor: 'String',
    },
    FundingSourceNotFoundRejection: {
        id: 'String',
        message: 'String',
    },
    FundingSourceStatusInfo: {
        '...on CanceledFundingSourceStatusInfo': 'CanceledFundingSourceStatusInfo',
        '...on EnabledFundingSourceStatusInfo': 'EnabledFundingSourceStatusInfo',
        '...on PendingFundingSourceStatusInfo': 'PendingFundingSourceStatusInfo',
        '...on RejectedFundingSourceStatusInfo': 'RejectedFundingSourceStatusInfo',
        '...on SuspendedFundingSourceStatusInfo': 'SuspendedFundingSourceStatusInfo',
        status: 'FundingSourceStatus',
    },
    FundingSourceWrongStatusRejection: {
        message: 'String',
        currentStatus: 'FundingSourceStatus',
        expectedStatus: 'FundingSourceStatus',
    },
    GenerateCapitalDepositDocumentUploadUrlPayload: {
        '...on GenerateCapitalDepositDocumentUploadUrlSuccessPayload': 'GenerateCapitalDepositDocumentUploadUrlSuccessPayload',
        '...on CapitalDepositDocumentCanNotBeUploaded': 'CapitalDepositDocumentCanNotBeUploaded',
        '...on CapitalDepositDocumentCanNotBeUploadedRejection': 'CapitalDepositDocumentCanNotBeUploadedRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on BadRequestRejection': 'BadRequestRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
    },
    GenerateCapitalDepositDocumentUploadUrlSuccessPayload: {
        uploadUrl: 'String',
    },
    GenerateSupportingDocumentUploadUrlPayload: {
        '...on GenerateSupportingDocumentUploadUrlSuccessPayload': 'GenerateSupportingDocumentUploadUrlSuccessPayload',
        '...on SupportingDocumentCollectionNotFoundRejection': 'SupportingDocumentCollectionNotFoundRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on SupportingDocumentUploadNotAllowedRejection': 'SupportingDocumentUploadNotAllowedRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    GenerateSupportingDocumentUploadUrlSuccessPayload: {
        supportingDocumentId: 'String',
        upload: 'SupportingDocumentUploadInfo',
    },
    GlobalFundingLimitExceededRejection: {
        message: 'String',
    },
    GlobalInstantFundingLimitExceededRejection: {
        message: 'String',
    },
    GrantConsentWithServerSignaturePayload: {
        '...on GrantConsentWithServerSignatureSuccessPayload': 'GrantConsentWithServerSignatureSuccessPayload',
        '...on ConsentNotFoundRejection': 'ConsentNotFoundRejection',
        '...on NotReachableConsentStatusRejection': 'NotReachableConsentStatusRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on ConsentTypeNotSupportedByServerConsentRejection': 'ConsentTypeNotSupportedByServerConsentRejection',
        '...on ServerConsentNotAllowedForConsentOperationRejection': 'ServerConsentNotAllowedForConsentOperationRejection',
        '...on ProjectNotFoundRejection': 'ProjectNotFoundRejection',
        '...on ServerConsentNotAllowedForProjectRejection': 'ServerConsentNotAllowedForProjectRejection',
        '...on ServerConsentProjectSettingsNotFoundRejection': 'ServerConsentProjectSettingsNotFoundRejection',
        '...on ServerConsentProjectCredentialMissingRejection': 'ServerConsentProjectCredentialMissingRejection',
        '...on ServerConsentProjectCredentialNotFoundRejection': 'ServerConsentProjectCredentialNotFoundRejection',
        '...on ServerConsentCredentialsNotValidOrOutdatedRejection': 'ServerConsentCredentialsNotValidOrOutdatedRejection',
        '...on ServerConsentSignatureNotValidRejection': 'ServerConsentSignatureNotValidRejection',
    },
    GrantConsentWithServerSignatureSuccessPayload: {
        consent: 'Consent',
    },
    Headquarters: {
        town: 'String',
        zipCode: 'String',
        address: 'String',
    },
    HexColorCode: `scalar.HexColorCode`,
    IBAN: `scalar.IBAN`,
    IBANNotReachableRejection: {
        message: 'String',
    },
    IBANNotValidRejection: {
        message: 'String',
    },
    IbanValidationRejection: {
        message: 'String',
    },
    IbanValidationResult: {
        '...on ValidIban': 'ValidIban',
        '...on InvalidIban': 'InvalidIban',
    },
    IdCardDocument: {
        id: 'String',
        type: 'DocumentType',
        issueDate: 'Date',
        expiryDate: 'Date',
        mrz: 'String',
        number: 'String',
        files: 'IdCardDocumentFile',
    },
    IdCardDocumentFile: {
        downloadUrl: 'String',
        side: 'DocumentFileSide',
    },
    Identification: {
        id: 'String',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        status: 'SwanIdentificationStatus',
        process: 'IdentificationProcess',
        levels: 'IdentificationLevelStatusesInfo',
        documents: 'IdentificationDocument',
        identityDocumentType: 'IdentityDocumentType',
    },
    IdentificationConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'IdentificationEdge',
    },
    IdentificationDocument: {
        '...on IdCardDocument': 'IdCardDocument',
        '...on PassportDocument': 'PassportDocument',
        '...on ResidencePermitDocument': 'ResidencePermitDocument',
        '...on DriversLicenseDocument': 'DriversLicenseDocument',
        '...on FacePhotoDocument': 'FacePhotoDocument',
        '...on ReportDocument': 'ReportDocument',
    },
    IdentificationEdge: {
        node: 'Identification',
        cursor: 'String',
    },
    IdentificationLevels: {
        PVID: 'Boolean',
        QES: 'Boolean',
        expert: 'Boolean',
    },
    IdentificationLevelStatusesInfo: {
        expert: 'IdentificationLevelStatusInfo',
        qes: 'IdentificationLevelStatusInfo',
        pvid: 'IdentificationLevelStatusInfo',
    },
    IdentificationLevelStatusInfo: {
        '...on NotSupportedIdentificationLevelStatusInfo': 'NotSupportedIdentificationLevelStatusInfo',
        '...on NotStartedIdentificationLevelStatusInfo': 'NotStartedIdentificationLevelStatusInfo',
        '...on StartedIdentificationLevelStatusInfo': 'StartedIdentificationLevelStatusInfo',
        '...on PendingIdentificationLevelStatusInfo': 'PendingIdentificationLevelStatusInfo',
        '...on ValidIdentificationLevelStatusInfo': 'ValidIdentificationLevelStatusInfo',
        '...on InvalidIdentificationLevelStatusInfo': 'InvalidIdentificationLevelStatusInfo',
        '...on CanceledIdentificationLevelStatusInfo': 'CanceledIdentificationLevelStatusInfo',
        '...on ExpiredIdentificationLevelStatusInfo': 'ExpiredIdentificationLevelStatusInfo',
    },
    IdentityAlreadyBindToAccountMembershipRejection: {
        accountId: 'String',
        identityId: 'String',
        message: 'String',
    },
    InAppProvisioningData: {
        activationData: 'String',
        ephemeralPublicKey: 'String',
        encryptedData: 'String',
        iv: 'String',
        publicKeyFingerprint: 'String',
        oaepHashingAlgorithm: 'String',
    },
    IndividualShareholder: {
        type: 'ShareholderType',
        firstName: 'String',
        lastName: 'String',
        birthDate: 'String',
        nationality: 'CCA3',
    },
    IndividualUltimateBeneficialOwner: {
        firstName: 'String',
        lastName: 'String',
        birthDate: 'DateTime',
        birthCity: 'String',
        birthCityPostalCode: 'String',
        birthCountryCode: 'CCA3',
        info: 'IndividualUltimateBeneficialOwnerInfo',
        taxIdentificationNumber: 'String',
        residencyAddress: 'AddressInformation',
        title: 'TitleEnum',
    },
    IndividualUltimateBeneficialOwnerInfo: {
        '...on IndividualUltimateBeneficialOwnerTypeHasCapital': 'IndividualUltimateBeneficialOwnerTypeHasCapital',
        '...on IndividualUltimateBeneficialOwnerTypeLegalRepresentative': 'IndividualUltimateBeneficialOwnerTypeLegalRepresentative',
        '...on IndividualUltimateBeneficialOwnerTypeOther': 'IndividualUltimateBeneficialOwnerTypeOther',
        type: 'IndividualUltimateBeneficialOwnerTypeEnum',
    },
    IndividualUltimateBeneficialOwnerTypeHasCapital: {
        type: 'IndividualUltimateBeneficialOwnerTypeEnum',
        indirect: 'Boolean',
        direct: 'Boolean',
        totalCapitalPercentage: 'Float',
    },
    IndividualUltimateBeneficialOwnerTypeLegalRepresentative: {
        type: 'IndividualUltimateBeneficialOwnerTypeEnum',
    },
    IndividualUltimateBeneficialOwnerTypeOther: {
        type: 'IndividualUltimateBeneficialOwnerTypeEnum',
    },
    InitiateCheckMerchantPaymentPayload: {
        '...on InitiateCheckMerchantPaymentSuccessPayload': 'InitiateCheckMerchantPaymentSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on NotFoundRejection': 'NotFoundRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on ValidationRejection': 'ValidationRejection',
        '...on CheckRejection': 'CheckRejection',
    },
    InitiateCheckMerchantPaymentSuccessPayload: {
        merchantPayment: 'Payment',
        fnciInfo: 'FnciInfo',
    },
    InitiateCreditTransfersPayload: {
        '...on InitiateCreditTransfersSuccessPayload': 'InitiateCreditTransfersSuccessPayload',
        '...on AccountNotFoundRejection': 'AccountNotFoundRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
    },
    InitiateCreditTransfersSuccessPayload: {
        payment: 'Payment',
    },
    InitiateFundingRequestPayload: {
        '...on InitiateFundingRequestSuccessPayload': 'InitiateFundingRequestSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on ValidationRejection': 'ValidationRejection',
        '...on FundingLimitExceededRejection': 'FundingLimitExceededRejection',
        '...on ProjectFundingLimitExceededRejection': 'ProjectFundingLimitExceededRejection',
        '...on GlobalFundingLimitExceededRejection': 'GlobalFundingLimitExceededRejection',
        '...on FundingSourceWrongStatusRejection': 'FundingSourceWrongStatusRejection',
        '...on FundingSourceNotFoundRejection': 'FundingSourceNotFoundRejection',
        '...on InsufficientFundsRejection': 'InsufficientFundsRejection',
        '...on InstantFundingLimitExceededRejection': 'InstantFundingLimitExceededRejection',
        '...on ProjectInstantFundingLimitExceededRejection': 'ProjectInstantFundingLimitExceededRejection',
        '...on GlobalInstantFundingLimitExceededRejection': 'GlobalInstantFundingLimitExceededRejection',
        '...on AccountVerificationWrongStatusRejection': 'AccountVerificationWrongStatusRejection',
    },
    InitiateFundingRequestSuccessPayload: {
        payment: 'Payment',
    },
    InitiateInternationalCreditTransferResponsePayload: {
        '...on InitiateInternationalCreditTransferResponseSuccessPayload': 'InitiateInternationalCreditTransferResponseSuccessPayload',
        '...on AccountNotFoundRejection': 'AccountNotFoundRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    InitiateInternationalCreditTransferResponseSuccessPayload: {
        payment: 'Payment',
        quote: 'InternationalCreditTransferQuote',
    },
    InitiateMerchantPaymentCollectionPayload: {
        '...on InitiateMerchantPaymentCollectionSuccessPayload': 'InitiateMerchantPaymentCollectionSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on NotFoundRejection': 'NotFoundRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    InitiateMerchantPaymentCollectionSuccessPayload: {
        merchantPaymentCollection: 'Payment',
    },
    InstantFundingLimit: {
        amount: 'Amount',
        funding: 'Amount',
    },
    InstantFundingLimitExceededRejection: {
        message: 'String',
    },
    InsufficientFundsRejection: {
        message: 'String',
    },
    InternalBeneficiary: {
        id: 'ID',
        name: 'String',
        isMyOwnIban: 'Boolean',
        accountNumber: 'AccountNumber',
    },
    InternalCreditTransfer: {
        id: 'ID',
        reference: 'String',
        paymentMethodIdentifier: 'String',
        side: 'TransactionSide',
        type: 'TransactionTypeEnum',
        amount: 'Amount',
        label: 'String',
        statusInfo: 'TransactionStatusInfo',
        paymentId: 'String',
        payment: 'Payment',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        counterparty: 'String',
        bookedBalanceAfter: 'Amount',
        paymentProduct: 'PaymentProduct',
        creditor: 'InternalCreditTransferCreditor',
        debtor: 'InternalCreditTransferDebtor',
        account: 'Account',
        externalReference: 'String',
        executionDate: 'DateTime',
        requestedExecutionAt: 'DateTime',
        originTransactionId: 'String',
        originTransaction: 'Transaction',
        returnReason: 'TransactionReasonCode',
    },
    InternalCreditTransferCreditor: {
        '...on InternalCreditTransferInCreditor': 'InternalCreditTransferInCreditor',
        '...on InternalCreditTransferOutCreditor': 'InternalCreditTransferOutCreditor',
        name: 'String',
        accountNumber: 'AccountNumber',
    },
    InternalCreditTransferDebtor: {
        '...on InternalCreditTransferInDebtor': 'InternalCreditTransferInDebtor',
        '...on InternalCreditTransferOutDebtor': 'InternalCreditTransferOutDebtor',
        name: 'String',
        accountNumber: 'AccountNumber',
    },
    InternalCreditTransferInCreditor: {
        name: 'String',
        accountNumber: 'AccountNumber',
    },
    InternalCreditTransferInDebtor: {
        name: 'String',
        accountNumber: 'AccountNumber',
    },
    InternalCreditTransferOutCreditor: {
        name: 'String',
        accountNumber: 'AccountNumber',
    },
    InternalCreditTransferOutDebtor: {
        name: 'String',
        accountNumber: 'AccountNumber',
    },
    InternalDirectDebitB2BMerchantPaymentMethod: {
        id: 'ID',
        type: 'MerchantPaymentMethodType',
        methodId: 'ID',
        statusInfo: 'MerchantPaymentMethodStatusInfo',
        version: 'Int',
        updatedAt: 'Date',
        rollingReserve: 'RollingReserve',
    },
    InternalDirectDebitCreditor: {
        accountId: 'ID',
    },
    InternalDirectDebitDebtor: {
        accountId: 'ID',
    },
    InternalDirectDebitMandate: {
        '...on InternalPaymentDirectDebitMandate': 'InternalPaymentDirectDebitMandate',
        '...on InternalReceivedDirectDebitMandate': 'InternalReceivedDirectDebitMandate',
        id: 'ID',
    },
    InternalDirectDebitStandardMerchantPaymentMethod: {
        id: 'ID',
        type: 'MerchantPaymentMethodType',
        methodId: 'ID',
        statusInfo: 'MerchantPaymentMethodStatusInfo',
        version: 'Int',
        updatedAt: 'Date',
        rollingReserve: 'RollingReserve',
    },
    InternalDirectDebitTransaction: {
        id: 'ID',
        reference: 'String',
        paymentMethodIdentifier: 'String',
        side: 'TransactionSide',
        type: 'TransactionTypeEnum',
        amount: 'Amount',
        label: 'String',
        statusInfo: 'TransactionStatusInfo',
        paymentId: 'String',
        payment: 'Payment',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        counterparty: 'String',
        bookedBalanceAfter: 'Amount',
        paymentProduct: 'PaymentProduct',
        creditor: 'InternalDirectDebitCreditor',
        debtor: 'InternalDirectDebitDebtor',
        account: 'Account',
        mandate: 'InternalDirectDebitMandate',
        externalReference: 'String',
        executionDate: 'DateTime',
        requestedExecutionAt: 'DateTime',
        originTransactionId: 'String',
        originTransaction: 'Transaction',
        reservedAmount: 'Amount',
        reservedAmountReleasedAt: 'DateTime',
        returnReason: 'TransactionReasonCode',
    },
    InternalErrorRejection: {
        message: 'String',
    },
    InternalPaymentDirectDebitMandate: {
        id: 'ID',
        transactions: 'TransactionConnection',
        reference: 'String',
        scheme: 'InternalPaymentMandateScheme',
        statusInfo: 'PaymentMandateStatusInfo',
        sequence: 'InternalPaymentMandateSequence',
        mandateDocumentUrl: 'String',
        debtor: 'InternalPaymentMandateDebtor',
        ultimateCreditorName: 'String',
        creditor: 'InternalPaymentMandateCreditor',
        signatureDate: 'Date',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        executedAt: 'DateTime',
        expiredAt: 'Date',
        accountHolder: 'AccountHolder',
        language: 'String',
        name: 'String',
    },
    InternalPaymentMandateCreditor: {
        id: 'ID',
        identifier: 'ID',
        name: 'String',
        address: 'Address',
    },
    InternalPaymentMandateDebtor: {
        name: 'String',
        email: 'String',
        country: 'CCA3',
        address: 'Address',
        accountId: 'ID',
    },
    InternalReceivedDirectDebitMandate: {
        id: 'ID',
        transactions: 'TransactionConnection',
        version: 'String',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        reference: 'String',
        scheme: 'InternalReceivedDirectDebitMandateScheme',
        sequence: 'InternalReceivedDirectDebitMandateSequence',
        creditor: 'InternalReceivedDirectDebitMandateCreditor',
        ultimateCreditorName: 'String',
        executedAt: 'DateTime',
        signatureDate: 'Date',
        expiredAt: 'Date',
        statusInfo: 'ReceivedDirectDebitMandateStatusInfo',
        account: 'Account',
        iban: 'IBAN',
        name: 'String',
    },
    InternalReceivedDirectDebitMandateCreditor: {
        identifier: 'String',
        name: 'String',
        address: 'Address',
    },
    InternationalBeneficiaryDynamicForms: {
        schemes: 'Scheme',
    },
    InternationalCreditTransferCreditor: {
        '...on InternationalCreditTransferOutCreditor': 'InternationalCreditTransferOutCreditor',
        '...on InternationalCreditTransferInCreditor': 'InternationalCreditTransferInCreditor',
    },
    InternationalCreditTransferCurrencyExchange: {
        exchangeRate: 'String',
        feesAmount: 'Amount',
        sourceAmount: 'Amount',
        targetAmount: 'Amount',
    },
    InternationalCreditTransferDebtor: {
        '...on InternationalCreditTransferOutDebtor': 'InternationalCreditTransferOutDebtor',
        '...on InternationalCreditTransferInDebtor': 'InternationalCreditTransferInDebtor',
    },
    InternationalCreditTransferDetails: {
        key: 'String',
        value: 'String',
    },
    InternationalCreditTransferDynamicForm: {
        fields: 'Field',
        remainingFieldsToRefreshCount: 'Int',
    },
    InternationalCreditTransferInCreditor: {
        name: 'String',
        BIC: 'BIC',
        IBAN: 'IBAN',
        maskedIBAN: 'String',
        virtualIBANEntryId: 'ID',
    },
    InternationalCreditTransferInDebtor: {
        name: 'String',
        accountNumber: 'String',
        bic: 'String',
    },
    InternationalCreditTransferOutCreditor: {
        currency: 'Currency',
        details: 'InternationalCreditTransferDetails',
        name: 'String',
        route: 'InternationalCreditTransferRoute',
    },
    InternationalCreditTransferOutDebtor: {
        name: 'String',
    },
    InternationalCreditTransferQuote: {
        exchangeRate: 'String',
        sourceAmount: 'Amount',
        targetAmount: 'Amount',
        feesAmount: 'Amount',
    },
    InternationalCreditTransferTransaction: {
        account: 'Account',
        amount: 'Amount',
        bookedBalanceAfter: 'Amount',
        counterparty: 'String',
        createdAt: 'DateTime',
        creditor: 'InternationalCreditTransferCreditor',
        debtor: 'InternationalCreditTransferDebtor',
        executionDate: 'DateTime',
        externalReference: 'String',
        fees: 'Amount',
        id: 'ID',
        instructedAmount: 'Amount',
        intermediaryBankFees: 'Amount',
        label: 'String',
        originTransaction: 'Transaction',
        originTransactionId: 'String',
        payment: 'Payment',
        paymentId: 'String',
        paymentMethodIdentifier: 'String',
        paymentProduct: 'PaymentProduct',
        currencyExchange: 'InternationalCreditTransferCurrencyExchange',
        reference: 'String',
        requestedExecutionAt: 'DateTime',
        returnReason: 'TransactionReasonCode',
        side: 'TransactionSide',
        statusInfo: 'TransactionStatusInfo',
        type: 'TransactionTypeEnum',
        updatedAt: 'DateTime',
    },
    InvalidArgumentRejection: {
        message: 'String',
        code: 'InvalidArgumentRejectionCode',
        fields: 'InvalidArgumentRejectionField',
    },
    InvalidArgumentRejectionField: {
        name: 'String',
        errors: 'String',
    },
    InvalidBeneficiaryVerification: {
        message: 'String',
    },
    InvalidIban: {
        iban: 'IBAN',
        code: 'InvalidIbanCode',
        message: 'String',
    },
    InvalidIdentificationLevelStatusInfo: {
        status: 'SwanIdentificationStatus',
        reasons: 'IdentificationInvalidReason',
    },
    InvalidPhoneNumberRejection: {
        message: 'String',
    },
    InvalidSirenNumberRejection: {
        message: 'String',
    },
    Invoice: {
        id: 'ID',
        accountId: 'ID',
        name: 'String',
        type: 'InvoiceType',
        status: 'InvoiceStatus',
        amount: 'Amount',
        url: 'String',
        expiresAt: 'DateTime',
        openingDate: 'DateTime',
        closingDate: 'DateTime',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
    },
    InvoiceConnection: {
        pageInfo: 'PageInfo',
        totalCount: 'Int',
        edges: 'InvoiceEdge',
    },
    InvoiceEdge: {
        node: 'Invoice',
        cursor: 'String',
    },
    KeyValue: {
        key: 'String',
        value: 'String',
    },
    LegalDocument: {
        id: 'ID',
        type: 'LegalDocumentType',
        statusInfo: 'LegalDocumentStatusInfo',
        language: 'AccountLanguage',
        url: 'String',
    },
    LegalDocumentActiveStatusInfo: {
        status: 'LegalDocumentStatus',
        createdAt: 'DateTime',
        activatedAt: 'DateTime',
    },
    LegalDocumentConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'LegalDocumentEdge',
    },
    LegalDocumentEdge: {
        cursor: 'String',
        node: 'LegalDocument',
    },
    LegalDocumentInactiveStatusInfo: {
        status: 'LegalDocumentStatus',
        createdAt: 'DateTime',
        activatedAt: 'DateTime',
        deactivatedAt: 'DateTime',
    },
    LegalDocumentStatusInfo: {
        '...on LegalDocumentActiveStatusInfo': 'LegalDocumentActiveStatusInfo',
        '...on LegalDocumentInactiveStatusInfo': 'LegalDocumentInactiveStatusInfo',
        '...on LegalDocumentUpcomingStatusInfo': 'LegalDocumentUpcomingStatusInfo',
        status: 'LegalDocumentStatus',
    },
    LegalDocumentUpcomingStatusInfo: {
        status: 'LegalDocumentStatus',
        createdAt: 'DateTime',
        effectiveDate: 'DateTime',
    },
    LegalRepresentativeAccountMembershipCannotBeDisabledRejection: {
        accountMembershipId: 'String',
        message: 'String',
    },
    LegalRepresentativeAccountMembershipCannotBeSuspendedRejection: {
        id: 'String',
        message: 'String',
    },
    MerchantPaymentLink: {
        id: 'String',
        projectId: 'ID',
        url: 'String',
        statusInfo: 'MerchantPaymentLinkStatusInfo',
        merchantProfile: 'MerchantProfile',
        amount: 'Amount',
        redirectUrl: 'String',
        cancelRedirectUrl: 'String',
        sequence: 'PaymentLinkSequenceType',
        billingAddress: 'Address',
        requestedExecutionAt: 'DateTime',
        externalReference: 'String',
        reference: 'String',
        language: 'String',
        label: 'String',
        customer: 'Customer',
        paymentMethods: 'MerchantPaymentMethod',
    },
    MerchantPaymentLinkStatusInfo: {
        '...on ActiveMerchantPaymentLinkStatusInfo': 'ActiveMerchantPaymentLinkStatusInfo',
        '...on CompletedMerchantPaymentLinkStatusInfo': 'CompletedMerchantPaymentLinkStatusInfo',
        '...on ExpiredMerchantPaymentLinkStatusInfo': 'ExpiredMerchantPaymentLinkStatusInfo',
        status: 'MerchantPaymentLinkStatus',
    },
    MerchantPaymentMethod: {
        '...on CardMerchantPaymentMethod': 'CardMerchantPaymentMethod',
        '...on CheckMerchantPaymentMethod': 'CheckMerchantPaymentMethod',
        '...on InternalDirectDebitB2BMerchantPaymentMethod': 'InternalDirectDebitB2BMerchantPaymentMethod',
        '...on InternalDirectDebitStandardMerchantPaymentMethod': 'InternalDirectDebitStandardMerchantPaymentMethod',
        '...on SepaDirectDebitB2BMerchantPaymentMethod': 'SepaDirectDebitB2BMerchantPaymentMethod',
        '...on SepaDirectDebitCoreMerchantPaymentMethod': 'SepaDirectDebitCoreMerchantPaymentMethod',
        id: 'ID',
        type: 'MerchantPaymentMethodType',
        methodId: 'ID',
        statusInfo: 'MerchantPaymentMethodStatusInfo',
        version: 'Int',
        updatedAt: 'Date',
        rollingReserve: 'RollingReserve',
    },
    MerchantPaymentMethodNotActiveRejection: {
        paymentMethodIds: 'String',
        message: 'String',
    },
    MerchantPaymentMethodStatusInfo: {
        '...on CanceledMerchantPaymentMethodStatusInfo': 'CanceledMerchantPaymentMethodStatusInfo',
        '...on DisabledMerchantPaymentMethodStatusInfo': 'DisabledMerchantPaymentMethodStatusInfo',
        '...on EnabledMerchantPaymentMethodStatusInfo': 'EnabledMerchantPaymentMethodStatusInfo',
        '...on PendingMerchantPaymentMethodStatusInfo': 'PendingMerchantPaymentMethodStatusInfo',
        '...on RejectedMerchantPaymentMethodStatusInfo': 'RejectedMerchantPaymentMethodStatusInfo',
        '...on SuspendedMerchantPaymentMethodStatusInfo': 'SuspendedMerchantPaymentMethodStatusInfo',
        status: 'MerchantPaymentMethodStatus',
    },
    MerchantProfile: {
        id: 'ID',
        accountId: 'ID',
        merchantName: 'String',
        merchantWebsite: 'String',
        merchantLogoUrl: 'String',
        statusInfo: 'MerchantProfileStatusInfo',
        productType: 'ProductType',
        expectedMonthlyPaymentVolume: 'Amount',
        merchantPaymentMethods: 'MerchantPaymentMethod',
        requestedMerchantProfileUpdates: 'RequestMerchantProfileUpdate',
        expectedAverageBasket: 'Amount',
        accentColor: 'String',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
    },
    MerchantProfileConnection: {
        pageInfo: 'PageInfo',
        edges: 'MerchantProfileEdge',
        totalCount: 'Int',
    },
    MerchantProfileEdge: {
        node: 'MerchantProfile',
        cursor: 'String',
    },
    MerchantProfileStatusInfo: {
        '...on CanceledMerchantProfileStatusInfo': 'CanceledMerchantProfileStatusInfo',
        '...on EnabledMerchantProfileStatusInfo': 'EnabledMerchantProfileStatusInfo',
        '...on PendingReviewMerchantProfileStatusInfo': 'PendingReviewMerchantProfileStatusInfo',
        '...on RejectedMerchantProfileStatusInfo': 'RejectedMerchantProfileStatusInfo',
        '...on SuspendedMerchantProfileStatusInfo': 'SuspendedMerchantProfileStatusInfo',
        status: 'MerchantProfileStatus',
    },
    MerchantProfileWrongStatusRejection: {
        message: 'String',
        currentStatus: 'MerchantProfileStatus',
        expectedStatus: 'MerchantProfileStatus',
    },
    MissingMandatoryFieldRejection: {
        message: 'String',
    },
    Mutation: {
        activatePhysicalCard: 'ActivatePhysicalCardPayload',
        addAccountMembership: 'AddAccountMembershipPayload',
        addAccountMemberships: 'AddAccountMembershipsPayload',
        addCard: 'AddCardPayload',
        addCardsWithGroupDelivery: 'AddCardsWithGroupDeliveryPayload',
        addCards: 'AddCardsPayload',
        addDigitalCard: 'AddDigitalCardPayload',
        addExternalAccountBalance: 'AddExternalAccountBalancePayload',
        addExternalAccount: 'AddExternalAccountPayload',
        addFundingLimitSettingsChangeRequest: 'AddFundingLimitSettingsChangeRequestPayload',
        addOrUpdateExternalAccountBalance: 'AddOrUpdateExternalAccountBalancePayload',
        addSingleUseVirtualCard: 'AddSingleUseVirtualCardPayload',
        addSingleUseVirtualCards: 'AddSingleUseVirtualCardsPayload',
        addVirtualIbanEntry: 'AddVirtualIbanEntryPayload',
        allowSddVirtualIbanEntry: 'AllowSddVirtualIbanEntryPayload',
        allowSdd: 'AllowSddPayload',
        bindAccountMembership: 'BindAccountMembershipPayload',
        cancelCard: 'CancelCardPayload',
        cancelDigitalCard: 'CancelDigitalCardPayload',
        cancelPhysicalCard: 'CancelPhysicalCardPayload',
        cancelVirtualIbanEntry: 'CancelVirtualIbanEntryPayload',
        closeAccount: 'CloseAccountPayload',
        confirmPhysicalCardRenewal: 'ConfirmPhysicalCardRenewalPayload',
        deleteSupportingDocument: 'DeleteSupportingDocumentPayload',
        denySddVirtualIbanEntry: 'DenySddVirtualIbanEntryPayload',
        denySdd: 'DenySddPayload',
        disableAccountMembership: 'DisableAccountMembershipPayload',
        finalizeOnboarding: 'FinalizeOnboardingPayload',
        onboardCompanyAccountHolder: 'OnboardCompanyAccountHolderPayload',
        onboardIndividualAccountHolder: 'OnboardIndividualAccountHolderPayload',
        printPhysicalCard: 'PrintPhysicalCardPayload',
        resumeAccountMembership: 'ResumeAccountMembershipPayload',
        resumePhysicalCard: 'ResumePhysicalCardPayload',
        suspendAccountMembership: 'SuspendAccountMembershipPayload',
        suspendPhysicalCard: 'SuspendPhysicalCardPayload',
        updateAccountHolder: 'UpdateAccountHolderPayload',
        updateAccountMembership: 'UpdateAccountMembershipPayload',
        updateAccount: 'UpdateAccountPayload',
        updateCard: 'UpdateCardPayload',
        updateCompanyOnboarding: 'UpdateCompanyOnboardingPayload',
        updateIndividualOnboarding: 'UpdateIndividualOnboardingPayload',
        updateSupportingDocument: 'UpdateSupportingDocumentPayload',
        viewCardNumbers: 'ViewCardNumbersPayload',
        viewPhysicalCardNumbers: 'ViewPhysicalCardNumbersPayload',
        viewPhysicalCardPin: 'ViewPhysicalCardPinPayload',
        generateSupportingDocumentUploadUrl: 'GenerateSupportingDocumentUploadUrlPayload',
        requestSupportingDocumentCollectionReview: 'RequestSupportingDocumentCollectionReviewPayload',
        generateAccountStatement: 'Statement',
        createCapitalDepositCase: 'CreateCapitalDepositCasePayload',
        generateCapitalDepositDocumentUploadUrl: 'GenerateCapitalDepositDocumentUploadUrlPayload',
        cancelConsent: 'CancelConsentPayload',
        createMultiConsent: 'CreateMultiConsentPayload',
        grantConsentWithServerSignature: 'GrantConsentWithServerSignaturePayload',
        updateUserConsentSettings: 'UpdateUserConsentSettingsPayload',
        addReceivedInternalDirectDebitB2bMandate: 'AddReceivedInternalDirectDebitB2bMandatePayload',
        addReceivedSepaDirectDebitB2bMandate: 'AddReceivedSepaDirectDebitB2bMandatePayload',
        enableReceivedDirectDebitMandate: 'EnableReceivedDirectDebitMandatePayload',
        suspendReceivedDirectDebitMandate: 'SuspendReceivedDirectDebitMandatePayload',
        updateReceivedSepaDirectDebitB2bMandate: 'UpdateReceivedSepaDirectDebitB2bMandatePayload',
        addInternalDirectDebitPaymentMandate: 'AddInternalDirectDebitPaymentMandatePayload',
        addMerchantProfile: 'AddMerchantProfilePayload',
        addSepaDirectDebitPaymentMandate: 'AddSepaDirectDebitPaymentMandatePayload',
        initiateCheckMerchantPayment: 'InitiateCheckMerchantPaymentPayload',
        createMerchantPaymentLink: 'CreateMerchantPaymentLinkPayload',
        initiateMerchantPaymentCollection: 'InitiateMerchantPaymentCollectionPayload',
        requestMerchantPaymentMethods: 'RequestMerchantPaymentMethodsPayload',
        requestMerchantProfileUpdate: 'RequestMerchantProfileUpdatePayload',
        cancelTransaction: 'CancelTransactionPayload',
        initiateCreditTransfers: 'InitiateCreditTransfersPayload',
        refund: 'RefundPayload',
        addDirectDebitFundingSource: 'AddDirectDebitFundingSourcePayload',
        cancelFundingSource: 'CancelFundingSourcePayload',
        cancelStandingOrder: 'CancelStandingOrderPayload',
        initiateFundingRequest: 'InitiateFundingRequestPayload',
        initiateInternationalCreditTransfer: 'InitiateInternationalCreditTransferResponsePayload',
        scheduleStandingOrder: 'ScheduleStandingOrderPayload',
        replayWebhookEvent: 'ReplayWebhookEventPayload',
        addWebhookSubscription: 'WebhookSubscriptionPayload',
    },
    NotFoundRejection: {
        id: 'String',
        message: 'String',
    },
    NotReachableConsentStatusRejection: {
        message: 'String',
        currentStatus: 'ConsentStatus',
        unreachableStatus: 'ConsentStatus',
    },
    NotStartedIdentificationLevelStatusInfo: {
        status: 'SwanIdentificationStatus',
    },
    NotSupportedCountryRejection: {
        message: 'String',
    },
    NotSupportedIdentificationLevelStatusInfo: {
        status: 'SwanIdentificationStatus',
    },
    OAuthRedirectParameters: {
        state: 'String',
        redirectUrl: 'String',
    },
    OnboardCompanyAccountHolderPayload: {
        '...on OnboardCompanyAccountHolderSuccessPayload': 'OnboardCompanyAccountHolderSuccessPayload',
        '...on BadRequestRejection': 'BadRequestRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    OnboardCompanyAccountHolderSuccessPayload: {
        onboarding: 'Onboarding',
    },
    OnboardIndividualAccountHolderPayload: {
        '...on OnboardIndividualAccountHolderSuccessPayload': 'OnboardIndividualAccountHolderSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    OnboardIndividualAccountHolderSuccessPayload: {
        onboarding: 'Onboarding',
    },
    Onboarding: {
        id: 'String',
        accountName: 'String',
        accountCountry: 'AccountCountry',
        createdAt: 'DateTime',
        email: 'String',
        finalizedAt: 'DateTime',
        language: 'String',
        info: 'OnboardingAccountHolderInfo',
        accountHolder: 'AccountHolder',
        onboardingUrl: 'String',
        onboardingState: 'OnboardingState',
        redirectUrl: 'String',
        oAuthRedirectParameters: 'OAuthRedirectParameters',
        statusInfo: 'OnboardingStatusInfo',
        tcuUrl: 'String',
        supportingDocumentCollection: 'SupportingDocumentCollection',
        updatedAt: 'DateTime',
        account: 'Account',
        legalRepresentativeAcceptedIdentificationLevels: 'IdentificationLevel',
        legalRepresentativeRecommendedIdentificationLevel: 'IdentificationLevel',
    },
    OnboardingAccountHolderInfo: {
        '...on OnboardingCompanyAccountHolderInfo': 'OnboardingCompanyAccountHolderInfo',
        '...on OnboardingIndividualAccountHolderInfo': 'OnboardingIndividualAccountHolderInfo',
        type: 'AccountHolderType',
    },
    OnboardingCompanyAccountHolderInfo: {
        type: 'AccountHolderType',
        name: 'String',
        registrationNumber: 'String',
        companyType: 'CompanyType',
        businessActivity: 'BusinessActivity',
        businessActivityDescription: 'String',
        monthlyPaymentVolume: 'MonthlyPaymentVolume',
        individualUltimateBeneficialOwners: 'IndividualUltimateBeneficialOwner',
        residencyAddress: 'AddressInfo',
        isRegistered: 'Boolean',
        vatNumber: 'String',
        taxIdentificationNumber: 'String',
        legalRepresentativePersonalAddress: 'AddressInformation',
        typeOfRepresentation: 'TypeOfRepresentation',
    },
    OnboardingConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'OnboardingEdge',
    },
    OnboardingEdge: {
        cursor: 'String',
        node: 'Onboarding',
    },
    OnboardingFinalizedStatusInfo: {
        status: 'OnboardingStatus',
    },
    OnboardingIndividualAccountHolderInfo: {
        type: 'AccountHolderType',
        employmentStatus: 'EmploymentStatus',
        monthlyIncome: 'MonthlyIncome',
        residencyAddress: 'AddressInfo',
        taxIdentificationNumber: 'String',
    },
    OnboardingInfo: {
        id: 'String',
        accountName: 'String',
        accountCountry: 'AccountCountry',
        email: 'String',
        language: 'String',
        info: 'OnboardingAccountHolderInfo',
        onboardingUrl: 'String',
        onboardingState: 'OnboardingState',
        redirectUrl: 'String',
        projectInfo: 'ProjectInfo',
        verificationFlow: 'VerificationFlow',
        oAuthRedirectParameters: 'OAuthRedirectParameters',
        statusInfo: 'OnboardingStatusInfo',
        supportingDocumentCollection: 'SupportingDocumentCollection',
        legalRepresentativeAcceptedIdentificationLevels: 'IdentificationLevel',
        legalRepresentativeRecommendedIdentificationLevel: 'IdentificationLevel',
        tcuUrl: 'String',
    },
    OnboardingInvalidStatusInfo: {
        status: 'OnboardingStatus',
        errors: 'ValidationError',
    },
    OnboardingNotCompletedRejection: {
        message: 'String',
        onboardingId: 'String',
        onboarding: 'Onboarding',
    },
    OnboardingStatusInfo: {
        '...on OnboardingFinalizedStatusInfo': 'OnboardingFinalizedStatusInfo',
        '...on OnboardingInvalidStatusInfo': 'OnboardingInvalidStatusInfo',
        '...on OnboardingValidStatusInfo': 'OnboardingValidStatusInfo',
        status: 'OnboardingStatus',
    },
    OnboardingValidStatusInfo: {
        status: 'OnboardingStatus',
    },
    PageInfo: {
        hasNextPage: 'Boolean',
        hasPreviousPage: 'Boolean',
        startCursor: 'String',
        endCursor: 'String',
    },
    PartnershipAcceptedStatusInfo: {
        status: 'PartnershipStatus',
        acceptedDate: 'DateTime',
    },
    PartnershipCanceledStatusInfo: {
        status: 'PartnershipStatus',
        acceptedDate: 'DateTime',
        canceledDate: 'DateTime',
        reason: 'String',
    },
    PartnershipCancelingStatusInfo: {
        status: 'PartnershipStatus',
        acceptedDate: 'DateTime',
        canceledAfter: 'DateTime',
    },
    PartnershipStatusInfo: {
        '...on PartnershipAcceptedStatusInfo': 'PartnershipAcceptedStatusInfo',
        '...on PartnershipCanceledStatusInfo': 'PartnershipCanceledStatusInfo',
        '...on PartnershipCancelingStatusInfo': 'PartnershipCancelingStatusInfo',
        status: 'PartnershipStatus',
    },
    PassportDocument: {
        id: 'String',
        type: 'DocumentType',
        issueDate: 'Date',
        expiryDate: 'Date',
        mrz: 'String',
        number: 'String',
        files: 'PassportDocumentFile',
    },
    PassportDocumentFile: {
        downloadUrl: 'String',
        side: 'DocumentFileSide',
    },
    Payment: {
        id: 'ID',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        statusInfo: 'PaymentStatusInfo',
        transactions: 'TransactionConnection',
        standingOrder: 'StandingOrder',
    },
    PaymentConnection: {
        pageInfo: 'PageInfo',
        edges: 'PaymentEdge',
        totalCount: 'Int',
    },
    PaymentConsentPending: {
        status: 'PaymentStatus',
        consent: 'Consent',
    },
    PaymentDirectDebitMandate: {
        '...on InternalPaymentDirectDebitMandate': 'InternalPaymentDirectDebitMandate',
        '...on SEPAPaymentDirectDebitMandate': 'SEPAPaymentDirectDebitMandate',
        id: 'ID',
    },
    PaymentEdge: {
        node: 'Payment',
        cursor: 'String',
    },
    PaymentInitiated: {
        status: 'PaymentStatus',
    },
    PaymentMandate: {
        '...on InternalPaymentDirectDebitMandate': 'InternalPaymentDirectDebitMandate',
        '...on SEPAPaymentDirectDebitMandate': 'SEPAPaymentDirectDebitMandate',
        id: 'ID',
        transactions: 'TransactionConnection',
        name: 'String',
        accountHolder: 'AccountHolder',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        executedAt: 'DateTime',
        expiredAt: 'Date',
        statusInfo: 'PaymentMandateStatusInfo',
    },
    PaymentMandateCanceledStatusInfo: {
        status: 'PaymentMandateStatus',
        reason: 'PaymentMandateCanceledReason',
        canceledAt: 'DateTime',
    },
    PaymentMandateConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'PaymentMandateEdge',
    },
    PaymentMandateConsentPendingStatusInfo: {
        status: 'PaymentMandateStatus',
        consent: 'Consent',
    },
    PaymentMandateCreditor: {
        '...on InternalPaymentMandateCreditor': 'InternalPaymentMandateCreditor',
        '...on SEPAPaymentMandateCreditor': 'SEPAPaymentMandateCreditor',
        id: 'ID',
        name: 'String',
        address: 'Address',
    },
    PaymentMandateDebtor: {
        '...on InternalPaymentMandateDebtor': 'InternalPaymentMandateDebtor',
        '...on SEPAPaymentMandateDebtor': 'SEPAPaymentMandateDebtor',
        name: 'String',
        email: 'String',
        country: 'CCA3',
    },
    PaymentMandateEdge: {
        cursor: 'String',
        node: 'PaymentMandate',
    },
    PaymentMandateEnabledStatusInfo: {
        status: 'PaymentMandateStatus',
    },
    PaymentMandateMandateNotFoundRejection: {
        id: 'String',
        message: 'String',
    },
    PaymentMandateReferenceAlreadyUsedRejection: {
        message: 'String',
    },
    PaymentMandateRejectedStatusInfo: {
        status: 'PaymentMandateStatus',
    },
    PaymentMandateStatusInfo: {
        '...on PaymentMandateCanceledStatusInfo': 'PaymentMandateCanceledStatusInfo',
        '...on PaymentMandateConsentPendingStatusInfo': 'PaymentMandateConsentPendingStatusInfo',
        '...on PaymentMandateEnabledStatusInfo': 'PaymentMandateEnabledStatusInfo',
        '...on PaymentMandateRejectedStatusInfo': 'PaymentMandateRejectedStatusInfo',
        status: 'PaymentMandateStatus',
    },
    PaymentMethodNotCompatibleRejection: {
        message: 'String',
    },
    PaymentRejected: {
        status: 'PaymentStatus',
        reason: 'String',
    },
    PaymentStatusInfo: {
        '...on PaymentConsentPending': 'PaymentConsentPending',
        '...on PaymentInitiated': 'PaymentInitiated',
        '...on PaymentRejected': 'PaymentRejected',
        status: 'PaymentStatus',
    },
    PdfStatement: {
        type: 'StatementType',
        url: 'String',
        expiresAt: 'DateTime',
    },
    PendingConsentAccountMembershipUpdate: {
        accountMembershipId: 'AccountMembership',
        consent: 'Consent',
    },
    PendingDigitalCard: {
        id: 'ID',
        type: 'DigitalizationType',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        walletProvider: 'WalletProvider',
        statusInfo: 'PendingDigitalCardStatusInfo',
        inAppProvisioningData: 'InAppProvisioningData',
    },
    PendingDigitalCardStatusInfo: {
        '...on DigitalCardConsentPendingStatusInfo': 'DigitalCardConsentPendingStatusInfo',
        '...on DigitalCardDeclinedStatusInfo': 'DigitalCardDeclinedStatusInfo',
        '...on DigitalCardPendingStatusInfo': 'DigitalCardPendingStatusInfo',
        status: 'PendingDigitalCardStatus',
    },
    PendingFundingSourceStatusInfo: {
        status: 'FundingSourceStatus',
    },
    PendingIdentificationLevelStatusInfo: {
        status: 'SwanIdentificationStatus',
    },
    PendingMerchantPaymentMethodStatusInfo: {
        status: 'MerchantPaymentMethodStatus',
    },
    PendingReviewMerchantProfileStatusInfo: {
        status: 'MerchantProfileStatus',
    },
    PendingReviewStatusInfo: {
        status: 'AccountVerificationStatus',
    },
    PendingTransactionStatusInfo: {
        status: 'TransactionStatus',
        pendingEndDate: 'DateTime',
    },
    PendingVerificationStatusInfo: {
        status: 'AccountVerificationStatus',
    },
    PermissionCannotBeGrantedRejection: {
        message: 'String',
    },
    PhoneNumber: `scalar.PhoneNumber`,
    PhysicalCard: {
        statusInfo: 'PhysicalCardStatusInfo',
        expiryDate: 'String',
        identifier: 'String',
        offlineSpendingLimit: 'Amount',
        cardMaskedNumber: 'String',
        customOptions: 'PhysicalCardCustomOptions',
        previousPhysicalCards: 'BasicPhysicalCardInfo',
    },
    PhysicalCardActivatedStatusInfo: {
        status: 'PhysicalCardStatus',
    },
    PhysicalCardCanceledStatusInfo: {
        status: 'PhysicalCardStatus',
        reason: 'String',
    },
    PhysicalCardCancelingStatusInfo: {
        status: 'PhysicalCardStatus',
        reason: 'String',
    },
    PhysicalCardConsentPendingStatusInfo: {
        status: 'PhysicalCardStatus',
        consent: 'Consent',
    },
    PhysicalCardCustomOptions: {
        additionalPrintedLine: 'String',
    },
    PhysicalCardNotFoundRejection: {
        message: 'String',
        identifier: 'String',
    },
    PhysicalCardProcessingStatusInfo: {
        status: 'PhysicalCardStatus',
    },
    PhysicalCardRenewedStatusInfo: {
        status: 'PhysicalCardStatus',
        address: 'Address',
        estimatedDeliveryDate: 'DateTime',
        trackingNumber: 'String',
        shippingProvider: 'String',
        isPINReady: 'Boolean',
        newPhysicalCard: 'BasicPhysicalCardInfo',
    },
    PhysicalCardStatusInfo: {
        '...on PhysicalCardActivatedStatusInfo': 'PhysicalCardActivatedStatusInfo',
        '...on PhysicalCardCanceledStatusInfo': 'PhysicalCardCanceledStatusInfo',
        '...on PhysicalCardCancelingStatusInfo': 'PhysicalCardCancelingStatusInfo',
        '...on PhysicalCardConsentPendingStatusInfo': 'PhysicalCardConsentPendingStatusInfo',
        '...on PhysicalCardProcessingStatusInfo': 'PhysicalCardProcessingStatusInfo',
        '...on PhysicalCardRenewedStatusInfo': 'PhysicalCardRenewedStatusInfo',
        '...on PhysicalCardSuspendedStatusInfo': 'PhysicalCardSuspendedStatusInfo',
        '...on PhysicalCardToActivateStatusInfo': 'PhysicalCardToActivateStatusInfo',
        '...on PhysicalCardToRenewStatusInfo': 'PhysicalCardToRenewStatusInfo',
        status: 'PhysicalCardStatus',
    },
    PhysicalCardSuspendedStatusInfo: {
        status: 'PhysicalCardStatus',
        reason: 'String',
    },
    PhysicalCardToActivateStatusInfo: {
        status: 'PhysicalCardStatus',
        address: 'Address',
        estimatedDeliveryDate: 'DateTime',
        trackingNumber: 'String',
        shippingProvider: 'String',
        isPINReady: 'Boolean',
    },
    PhysicalCardToRenewStatusInfo: {
        status: 'PhysicalCardStatus',
        address: 'Address',
    },
    PhysicalCardWrongStatusRejection: {
        message: 'String',
        identifier: 'String',
        currentStatus: 'PhysicalCardStatus',
        expectedStatus: 'PhysicalCardStatus',
    },
    PIN: `scalar.PIN`,
    PINNotReadyRejection: {
        physicalCardIdentifier: 'String',
        message: 'String',
    },
    PreProvisioningSUVCardSettings: {
        preProvisioningSUVCards: 'Boolean',
        preProvisioningSUVNumberOfCards: 'Int',
        ownerProvisioningSUVCards: 'ID',
        preProvisioningSUVCardsAvailablePercentage: 'Float',
    },
    PrintPhysicalCardPayload: {
        '...on PrintPhysicalCardSuccessPayload': 'PrintPhysicalCardSuccessPayload',
        '...on AccountMembershipNotAllowedRejection': 'AccountMembershipNotAllowedRejection',
        '...on AlreadyValidPhysicalCardRejection': 'AlreadyValidPhysicalCardRejection',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on BadRequestRejection': 'BadRequestRejection',
        '...on CardNotFoundRejection': 'CardNotFoundRejection',
        '...on CardProductNotApplicableToPhysicalCardsRejection': 'CardProductNotApplicableToPhysicalCardsRejection',
        '...on CardProductDisabledRejection': 'CardProductDisabledRejection',
        '...on MissingMandatoryFieldRejection': 'MissingMandatoryFieldRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    PrintPhysicalCardSuccessPayload: {
        physicalCard: 'PhysicalCard',
    },
    ProjectCardDesigns: {
        id: 'ID',
        issuingProcessorVisualId: 'String',
        specificCardProductCodeForCompanies: 'String',
        name: 'String',
        cardDesigns: 'CardProductDesign',
        preProvisioningSUVCardSettings: 'PreProvisioningSUVCardSettings',
    },
    ProjectCardSettings: {
        id: 'ID',
        issuingProcessorVisualId: 'String',
        specificCardProductCodeForCompanies: 'String',
        name: 'String',
        cardSettings: 'CardSettings',
        preProvisioningSUVCardSettings: 'PreProvisioningSUVCardSettings',
    },
    ProjectForbiddenRejection: {
        message: 'String',
    },
    ProjectFundingLimitExceededRejection: {
        message: 'String',
    },
    ProjectInfo: {
        cardProducts: 'CardProduct',
        activeCardSettings: 'CardSettings',
        id: 'ID',
        B2BMembershipIDVerification: 'Boolean',
        supportingDocumentSettings: 'SupportingDocumentSettings',
        name: 'String',
        type: 'ProjectType',
        logoUri: 'String',
        accentColor: 'String',
        customConsentSubdomain: 'String',
        oAuthClientId: 'String',
        tcuDocumentUri: 'String',
        tcuDocumentId: 'String',
        webBankingSettings: 'WebBankingSettings',
        status: 'ProjectStatus',
        allowsDesktopAuthentication: 'Boolean',
    },
    ProjectInstantFundingLimitExceededRejection: {
        message: 'String',
    },
    ProjectInvalidStatusRejection: {
        message: 'String',
    },
    ProjectNotFound: {
        message: 'String',
    },
    ProjectNotFoundRejection: {
        message: 'String',
    },
    ProjectSettingsForbiddenError: {
        message: 'String',
    },
    ProjectSettingsNotFound: {
        message: 'String',
    },
    ProjectSettingsStatusNotReachable: {
        message: 'String',
    },
    PublicOnboardingDisabledRejection: {
        message: 'String',
    },
    Query: {
        fundingLimitSettingsChangeRequest: 'FundingLimitSettingsChangeRequest',
        ibanValidation: 'IbanValidationResult',
        accountHolder: 'AccountHolder',
        accountHolders: 'AccountHolderConnection',
        accountMembership: 'AccountMembership',
        accountMemberships: 'AccountMembershipConnection',
        account: 'Account',
        accounts: 'AccountConnection',
        beneficiaryVerification: 'BeneficiaryVerificationResult',
        card: 'Card',
        cards: 'CardConnection',
        onboarding: 'Onboarding',
        onboardings: 'OnboardingConnection',
        supportingDocumentCollection: 'SupportingDocumentCollection',
        accountStatement: 'Statement',
        payment: 'Payment',
        payments: 'PaymentConnection',
        transaction: 'Transaction',
        transactions: 'TransactionConnection',
        accountInvoice: 'Invoice',
        capitalDepositCase: 'CapitalDepositCase',
        capitalDepositCases: 'CapitalDepositCaseConnection',
        capitalDepositDocument: 'CapitalDepositDocument',
        shareholder: 'Shareholder',
        projectInfo: 'ProjectInfo',
        consent: 'Consent',
        consents: 'ConsentConnection',
        user: 'User',
        users: 'UserConnection',
        receivedDirectDebitMandate: 'ReceivedDirectDebitMandate',
        merchantProfile: 'MerchantProfile',
        fundingSource: 'FundingSource',
        internationalBeneficiaryDynamicForms: 'InternationalBeneficiaryDynamicForms',
        internationalCreditTransferTransactionDetailsDynamicForm: 'InternationalCreditTransferDynamicForm',
        internationalCreditTransferQuote: 'InternationalCreditTransferQuote',
        standingOrder: 'StandingOrder',
        webhookEventLog: 'WebhookEventLog',
    },
    RadioField: {
        key: 'String',
        name: 'String',
        refreshDynamicFieldsOnChange: 'Boolean',
        required: 'Boolean',
        allowedValues: 'AllowedValue',
    },
    Reachability: {
        sepaCreditTransferInst: 'Boolean',
        sepaDirectDebitCore: 'Boolean',
        sepaDirectDebitB2b: 'Boolean',
        sepaCreditTransfer: 'Boolean',
    },
    Reason: {
        '...on CloseAccountReason': 'CloseAccountReason',
        '...on SuspendAccountReason': 'SuspendAccountReason',
        message: 'String',
    },
    ReceivedDirectDebitMandate: {
        '...on InternalReceivedDirectDebitMandate': 'InternalReceivedDirectDebitMandate',
        '...on SEPAReceivedDirectDebitMandate': 'SEPAReceivedDirectDebitMandate',
        id: 'ID',
        version: 'String',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        signatureDate: 'Date',
        executedAt: 'DateTime',
        expiredAt: 'Date',
        statusInfo: 'ReceivedDirectDebitMandateStatusInfo',
        name: 'String',
    },
    ReceivedDirectDebitMandateAlreadyExistRejection: {
        id: 'String',
        message: 'String',
    },
    ReceivedDirectDebitMandateCanceledRejection: {
        id: 'String',
        message: 'String',
    },
    ReceivedDirectDebitMandateConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'ReceivedDirectDebitMandateEdge',
    },
    ReceivedDirectDebitMandateEdge: {
        cursor: 'String',
        node: 'ReceivedDirectDebitMandate',
    },
    ReceivedDirectDebitMandateNotB2bRejection: {
        id: 'String',
        message: 'String',
    },
    ReceivedDirectDebitMandateNotFoundRejection: {
        id: 'String',
        message: 'String',
    },
    ReceivedDirectDebitMandateStatusInfo: {
        '...on ReceivedDirectDebitMandateStatusInfoCanceled': 'ReceivedDirectDebitMandateStatusInfoCanceled',
        '...on ReceivedDirectDebitMandateStatusInfoConsentInitiationPending': 'ReceivedDirectDebitMandateStatusInfoConsentInitiationPending',
        '...on ReceivedDirectDebitMandateStatusInfoConsentPending': 'ReceivedDirectDebitMandateStatusInfoConsentPending',
        '...on ReceivedDirectDebitMandateStatusInfoEnabled': 'ReceivedDirectDebitMandateStatusInfoEnabled',
        '...on ReceivedDirectDebitMandateStatusInfoSuspended': 'ReceivedDirectDebitMandateStatusInfoSuspended',
        status: 'ReceivedDirectDebitMandateStatus',
    },
    ReceivedDirectDebitMandateStatusInfoCanceled: {
        status: 'ReceivedDirectDebitMandateStatus',
        canceledAt: 'DateTime',
    },
    ReceivedDirectDebitMandateStatusInfoConsentInitiationPending: {
        status: 'ReceivedDirectDebitMandateStatus',
    },
    ReceivedDirectDebitMandateStatusInfoConsentPending: {
        status: 'ReceivedDirectDebitMandateStatus',
        consent: 'Consent',
    },
    ReceivedDirectDebitMandateStatusInfoEnabled: {
        status: 'ReceivedDirectDebitMandateStatus',
        enabledAt: 'DateTime',
    },
    ReceivedDirectDebitMandateStatusInfoSuspended: {
        status: 'ReceivedDirectDebitMandateStatus',
        suspendedAt: 'DateTime',
    },
    RefundPayload: {
        '...on RefundSuccessPayload': 'RefundSuccessPayload',
        '...on RefundRejection': 'RefundRejection',
    },
    RefundRejection: {
        message: 'String',
        code: 'RefundRejectionCode',
    },
    RefundSuccessPayload: {
        consent: 'Consent',
    },
    RejectedFundingSourceStatusInfo: {
        status: 'FundingSourceStatus',
        rejectedAt: 'Date',
        reasonCode: 'RejectedFundingSourceReason',
    },
    RejectedMerchantPaymentMethodStatusInfo: {
        status: 'MerchantPaymentMethodStatus',
        rejectedAt: 'Date',
    },
    RejectedMerchantProfileStatusInfo: {
        status: 'MerchantProfileStatus',
        rejectedAt: 'Date',
    },
    RejectedTransactionStatusInfo: {
        status: 'TransactionStatus',
        reason: 'RejectedReasonCode',
        hasFallback: 'Boolean',
    },
    RejectedVerificationStatusInfo: {
        reason: 'RejectedVerificationReason',
        rejectedAt: 'DateTime',
        status: 'AccountVerificationStatus',
    },
    Rejection: {
        '...on AccountHolderNotFoundRejection': 'AccountHolderNotFoundRejection',
        '...on AccountHolderTypeIndividualRejection': 'AccountHolderTypeIndividualRejection',
        '...on AccountMembershipCannotBeDisabledRejection': 'AccountMembershipCannotBeDisabledRejection',
        '...on AccountMembershipCannotBeUpdatedRejection': 'AccountMembershipCannotBeUpdatedRejection',
        '...on AccountMembershipNotAllowedRejection': 'AccountMembershipNotAllowedRejection',
        '...on AccountMembershipNotFoundRejection': 'AccountMembershipNotFoundRejection',
        '...on AccountMembershipNotReadyToBeBoundRejection': 'AccountMembershipNotReadyToBeBoundRejection',
        '...on AccountNotEligibleRejection': 'AccountNotEligibleRejection',
        '...on AccountNotFoundRejection': 'AccountNotFoundRejection',
        '...on AccountVerificationAlreadyRejectedRejection': 'AccountVerificationAlreadyRejectedRejection',
        '...on AccountVerificationWrongStatusRejection': 'AccountVerificationWrongStatusRejection',
        '...on ActionNotAllowedRejection': 'ActionNotAllowedRejection',
        '...on AddingCardsToDifferentAccountsRejection': 'AddingCardsToDifferentAccountsRejection',
        '...on AlreadyValidPhysicalCardRejection': 'AlreadyValidPhysicalCardRejection',
        '...on ApplePayNotAllowedForProjectRejection': 'ApplePayNotAllowedForProjectRejection',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on BadRequestRejection': 'BadRequestRejection',
        '...on CannotActivatePhysicalCardRejection': 'CannotActivatePhysicalCardRejection',
        '...on CapitalDepositDocumentCanNotBeUploaded': 'CapitalDepositDocumentCanNotBeUploaded',
        '...on CapitalDepositDocumentCanNotBeUploadedRejection': 'CapitalDepositDocumentCanNotBeUploadedRejection',
        '...on CardCanNotBeDigitalizedRejection': 'CardCanNotBeDigitalizedRejection',
        '...on CardNotFoundRejection': 'CardNotFoundRejection',
        '...on CardProductDisabledRejection': 'CardProductDisabledRejection',
        '...on CardProductNotApplicableToPhysicalCardsRejection': 'CardProductNotApplicableToPhysicalCardsRejection',
        '...on CardProductNotFoundRejection': 'CardProductNotFoundRejection',
        '...on CardProductSuspendedRejection': 'CardProductSuspendedRejection',
        '...on CardProductUsedRejection': 'CardProductUsedRejection',
        '...on CardWrongStatusRejection': 'CardWrongStatusRejection',
        '...on CheckRejection': 'CheckRejection',
        '...on ConsentNotFoundRejection': 'ConsentNotFoundRejection',
        '...on ConsentsAlreadyLinkedToMultiConsentRejection': 'ConsentsAlreadyLinkedToMultiConsentRejection',
        '...on ConsentsNotAllInCreatedStatusRejection': 'ConsentsNotAllInCreatedStatusRejection',
        '...on ConsentsNotFoundRejection': 'ConsentsNotFoundRejection',
        '...on ConsentTypeNotSupportedByServerConsentRejection': 'ConsentTypeNotSupportedByServerConsentRejection',
        '...on DebtorAccountClosedRejection': 'DebtorAccountClosedRejection',
        '...on DebtorAccountNotAllowedRejection': 'DebtorAccountNotAllowedRejection',
        '...on DigitalCardNotFoundRejection': 'DigitalCardNotFoundRejection',
        '...on EnabledCardDesignNotFoundRejection': 'EnabledCardDesignNotFoundRejection',
        '...on ExternalAccountAlreadyExistsRejection': 'ExternalAccountAlreadyExistsRejection',
        '...on ExternalAccountBalanceAlreadyExistsRejection': 'ExternalAccountBalanceAlreadyExistsRejection',
        '...on FeeSettingsNotFoundRejection': 'FeeSettingsNotFoundRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on FundingLimitExceededRejection': 'FundingLimitExceededRejection',
        '...on FundingLimitSettingsChangeRequestBadAmountRejection': 'FundingLimitSettingsChangeRequestBadAmountRejection',
        '...on FundingSourceNotFoundRejection': 'FundingSourceNotFoundRejection',
        '...on FundingSourceWrongStatusRejection': 'FundingSourceWrongStatusRejection',
        '...on GlobalFundingLimitExceededRejection': 'GlobalFundingLimitExceededRejection',
        '...on GlobalInstantFundingLimitExceededRejection': 'GlobalInstantFundingLimitExceededRejection',
        '...on IBANNotReachableRejection': 'IBANNotReachableRejection',
        '...on IBANNotValidRejection': 'IBANNotValidRejection',
        '...on IbanValidationRejection': 'IbanValidationRejection',
        '...on IdentityAlreadyBindToAccountMembershipRejection': 'IdentityAlreadyBindToAccountMembershipRejection',
        '...on InstantFundingLimitExceededRejection': 'InstantFundingLimitExceededRejection',
        '...on InsufficientFundsRejection': 'InsufficientFundsRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on InvalidArgumentRejection': 'InvalidArgumentRejection',
        '...on InvalidPhoneNumberRejection': 'InvalidPhoneNumberRejection',
        '...on InvalidSirenNumberRejection': 'InvalidSirenNumberRejection',
        '...on LegalRepresentativeAccountMembershipCannotBeDisabledRejection': 'LegalRepresentativeAccountMembershipCannotBeDisabledRejection',
        '...on LegalRepresentativeAccountMembershipCannotBeSuspendedRejection': 'LegalRepresentativeAccountMembershipCannotBeSuspendedRejection',
        '...on MerchantPaymentMethodNotActiveRejection': 'MerchantPaymentMethodNotActiveRejection',
        '...on MerchantProfileWrongStatusRejection': 'MerchantProfileWrongStatusRejection',
        '...on MissingMandatoryFieldRejection': 'MissingMandatoryFieldRejection',
        '...on NotFoundRejection': 'NotFoundRejection',
        '...on NotReachableConsentStatusRejection': 'NotReachableConsentStatusRejection',
        '...on NotSupportedCountryRejection': 'NotSupportedCountryRejection',
        '...on OnboardingNotCompletedRejection': 'OnboardingNotCompletedRejection',
        '...on PaymentMandateMandateNotFoundRejection': 'PaymentMandateMandateNotFoundRejection',
        '...on PaymentMandateReferenceAlreadyUsedRejection': 'PaymentMandateReferenceAlreadyUsedRejection',
        '...on PaymentMethodNotCompatibleRejection': 'PaymentMethodNotCompatibleRejection',
        '...on PermissionCannotBeGrantedRejection': 'PermissionCannotBeGrantedRejection',
        '...on PhysicalCardNotFoundRejection': 'PhysicalCardNotFoundRejection',
        '...on PhysicalCardWrongStatusRejection': 'PhysicalCardWrongStatusRejection',
        '...on PINNotReadyRejection': 'PINNotReadyRejection',
        '...on ProjectForbiddenRejection': 'ProjectForbiddenRejection',
        '...on ProjectFundingLimitExceededRejection': 'ProjectFundingLimitExceededRejection',
        '...on ProjectInstantFundingLimitExceededRejection': 'ProjectInstantFundingLimitExceededRejection',
        '...on ProjectInvalidStatusRejection': 'ProjectInvalidStatusRejection',
        '...on ProjectNotFound': 'ProjectNotFound',
        '...on ProjectNotFoundRejection': 'ProjectNotFoundRejection',
        '...on ProjectSettingsForbiddenError': 'ProjectSettingsForbiddenError',
        '...on ProjectSettingsNotFound': 'ProjectSettingsNotFound',
        '...on ProjectSettingsStatusNotReachable': 'ProjectSettingsStatusNotReachable',
        '...on PublicOnboardingDisabledRejection': 'PublicOnboardingDisabledRejection',
        '...on ReceivedDirectDebitMandateAlreadyExistRejection': 'ReceivedDirectDebitMandateAlreadyExistRejection',
        '...on ReceivedDirectDebitMandateCanceledRejection': 'ReceivedDirectDebitMandateCanceledRejection',
        '...on ReceivedDirectDebitMandateNotB2bRejection': 'ReceivedDirectDebitMandateNotB2bRejection',
        '...on ReceivedDirectDebitMandateNotFoundRejection': 'ReceivedDirectDebitMandateNotFoundRejection',
        '...on RefundRejection': 'RefundRejection',
        '...on RestrictedToUserRejection': 'RestrictedToUserRejection',
        '...on SchemeWrongRejection': 'SchemeWrongRejection',
        '...on ServerConsentCredentialsNotValidOrOutdatedRejection': 'ServerConsentCredentialsNotValidOrOutdatedRejection',
        '...on ServerConsentNotAllowedForConsentOperationRejection': 'ServerConsentNotAllowedForConsentOperationRejection',
        '...on ServerConsentNotAllowedForProjectRejection': 'ServerConsentNotAllowedForProjectRejection',
        '...on ServerConsentProjectCredentialMissingRejection': 'ServerConsentProjectCredentialMissingRejection',
        '...on ServerConsentProjectCredentialNotFoundRejection': 'ServerConsentProjectCredentialNotFoundRejection',
        '...on ServerConsentProjectSettingsNotFoundRejection': 'ServerConsentProjectSettingsNotFoundRejection',
        '...on ServerConsentSignatureNotValidRejection': 'ServerConsentSignatureNotValidRejection',
        '...on StandingOrderNotFoundRejection': 'StandingOrderNotFoundRejection',
        '...on SupportingDocumentCollectionNotFoundRejection': 'SupportingDocumentCollectionNotFoundRejection',
        '...on SupportingDocumentCollectionStatusDoesNotAllowDeletionRejection': 'SupportingDocumentCollectionStatusDoesNotAllowDeletionRejection',
        '...on SupportingDocumentCollectionStatusDoesNotAllowUpdateRejection': 'SupportingDocumentCollectionStatusDoesNotAllowUpdateRejection',
        '...on SupportingDocumentCollectionStatusNotAllowedRejection': 'SupportingDocumentCollectionStatusNotAllowedRejection',
        '...on SupportingDocumentNotFoundRejection': 'SupportingDocumentNotFoundRejection',
        '...on SupportingDocumentStatusDoesNotAllowDeletionRejection': 'SupportingDocumentStatusDoesNotAllowDeletionRejection',
        '...on SupportingDocumentStatusDoesNotAllowUpdateRejection': 'SupportingDocumentStatusDoesNotAllowUpdateRejection',
        '...on SupportingDocumentStatusNotAllowedRejection': 'SupportingDocumentStatusNotAllowedRejection',
        '...on SupportingDocumentUploadNotAllowedRejection': 'SupportingDocumentUploadNotAllowedRejection',
        '...on SuspendReceivedDirectDebitMandatedRejection': 'SuspendReceivedDirectDebitMandatedRejection',
        '...on SwanTCUDocumentNotFoundRejection': 'SwanTCUDocumentNotFoundRejection',
        '...on SwanTCUDocumentStatusNotAllowedRejection': 'SwanTCUDocumentStatusNotAllowedRejection',
        '...on TooManyChildConsentsRejection': 'TooManyChildConsentsRejection',
        '...on TooManyItemsRejection': 'TooManyItemsRejection',
        '...on TransactionNotFoundRejection': 'TransactionNotFoundRejection',
        '...on UpdateUserConsentSettingsTokenRejection': 'UpdateUserConsentSettingsTokenRejection',
        '...on UserNotAllowedToDisableItsOwnAccountMembershipRejection': 'UserNotAllowedToDisableItsOwnAccountMembershipRejection',
        '...on UserNotAllowedToManageAccountMembershipRejection': 'UserNotAllowedToManageAccountMembershipRejection',
        '...on UserNotAllowedToSuspendItsOwnAccountMembershipRejection': 'UserNotAllowedToSuspendItsOwnAccountMembershipRejection',
        '...on UserNotCardHolderRejection': 'UserNotCardHolderRejection',
        '...on ValidationRejection': 'ValidationRejection',
        '...on WebhookEventLogNotFoundRejection': 'WebhookEventLogNotFoundRejection',
        '...on WebhookSubscriptionNotFoundRejection': 'WebhookSubscriptionNotFoundRejection',
        '...on WrongValueProvidedRejection': 'WrongValueProvidedRejection',
        message: 'String',
    },
    ReleasedTransactionStatusInfo: {
        status: 'TransactionStatus',
        releaseDate: 'DateTime',
        reason: 'ReleasedReason',
    },
    ReplayWebhookEventPayload: {
        '...on ReplayWebhookEventSuccessPayload': 'ReplayWebhookEventSuccessPayload',
        '...on WebhookEventLogNotFoundRejection': 'WebhookEventLogNotFoundRejection',
        '...on WebhookSubscriptionNotFoundRejection': 'WebhookSubscriptionNotFoundRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on InvalidArgumentRejection': 'InvalidArgumentRejection',
    },
    ReplayWebhookEventSuccessPayload: {
        webhookEventLogEntryId: 'ID',
        endpointStatus: 'Int',
    },
    ReportDocument: {
        id: 'String',
        type: 'DocumentType',
        files: 'ReportDocumentFile',
    },
    ReportDocumentFile: {
        downloadUrl: 'String',
    },
    ReportExchangeRate: {
        sourceCurrency: 'Currency',
        exchangeRate: 'Float',
        unitCurrency: 'Currency',
        targetCurrency: 'Currency',
        quotationDate: 'Date',
        contractIdentification: 'String',
    },
    RequestMerchantPaymentMethodsPayload: {
        '...on RequestMerchantPaymentMethodsSuccessPayload': 'RequestMerchantPaymentMethodsSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on NotFoundRejection': 'NotFoundRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    RequestMerchantPaymentMethodsSuccessPayload: {
        merchantProfile: 'MerchantProfile',
    },
    RequestMerchantProfileUpdate: {
        id: 'ID',
        merchantProfileId: 'ID',
        merchantName: 'String',
        merchantWebsite: 'String',
        merchantLogoUrl: 'String',
        status: 'RequestMerchantProfileUpdateStatus',
        productType: 'ProductType',
        expectedMonthlyPaymentVolume: 'Amount',
        expectedAverageBasket: 'Amount',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
    },
    RequestMerchantProfileUpdatePayload: {
        '...on RequestMerchantProfileUpdateSuccessPayload': 'RequestMerchantProfileUpdateSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on AccountNotFoundRejection': 'AccountNotFoundRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    RequestMerchantProfileUpdateSuccessPayload: {
        requestMerchantProfileUpdate: 'RequestMerchantProfileUpdate',
    },
    RequestSupportingDocumentCollectionReviewPayload: {
        '...on RequestSupportingDocumentCollectionReviewSuccessPayload': 'RequestSupportingDocumentCollectionReviewSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on SupportingDocumentCollectionNotFoundRejection': 'SupportingDocumentCollectionNotFoundRejection',
        '...on SupportingDocumentCollectionStatusNotAllowedRejection': 'SupportingDocumentCollectionStatusNotAllowedRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    RequestSupportingDocumentCollectionReviewSuccessPayload: {
        supportingDocumentCollection: 'SupportingDocumentCollection',
    },
    ResidencePermitDocument: {
        id: 'String',
        type: 'DocumentType',
        issueDate: 'Date',
        expiryDate: 'Date',
        mrz: 'String',
        number: 'String',
        files: 'ResidencePermitDocumentFile',
    },
    ResidencePermitDocumentFile: {
        downloadUrl: 'String',
        side: 'DocumentFileSide',
    },
    RestrictedTo: {
        firstName: 'String',
        lastName: 'String',
        birthDate: 'Date',
        phoneNumber: 'String',
    },
    RestrictedToUserRejection: {
        message: 'String',
    },
    ResumeAccountMembershipPayload: {
        '...on ResumeAccountMembershipSuccessPayload': 'ResumeAccountMembershipSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on UserNotAllowedToManageAccountMembershipRejection': 'UserNotAllowedToManageAccountMembershipRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    ResumeAccountMembershipSuccessPayload: {
        consent: 'Consent',
    },
    ResumePhysicalCardPayload: {
        '...on ResumePhysicalCardSuccessPayload': 'ResumePhysicalCardSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on CardNotFoundRejection': 'CardNotFoundRejection',
        '...on UserNotCardHolderRejection': 'UserNotCardHolderRejection',
        '...on PhysicalCardNotFoundRejection': 'PhysicalCardNotFoundRejection',
        '...on PhysicalCardWrongStatusRejection': 'PhysicalCardWrongStatusRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    ResumePhysicalCardSuccessPayload: {
        physicalCard: 'PhysicalCard',
        consent: 'Consent',
    },
    RollingReserve: {
        percentage: 'Int',
        rollingDays: 'Int',
    },
    ScheduleStandingOrderPayload: {
        '...on ScheduleStandingOrderSuccessPayload': 'ScheduleStandingOrderSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on InvalidArgumentRejection': 'InvalidArgumentRejection',
    },
    ScheduleStandingOrderSuccessPayload: {
        standingOrder: 'StandingOrder',
    },
    Scheme: {
        fields: 'Field',
        title: 'String',
        type: 'InternationalCreditTransferRouteInput',
        remainingFieldsToRefreshCount: 'Int',
    },
    SchemeWrongRejection: {
        message: 'String',
    },
    SelectField: {
        key: 'String',
        name: 'String',
        refreshDynamicFieldsOnChange: 'Boolean',
        required: 'Boolean',
        allowedValues: 'AllowedValue',
    },
    SEPABeneficiary: {
        id: 'ID',
        name: 'String',
        isMyOwnIban: 'Boolean',
        address: 'Address',
        maskedIBAN: 'String',
    },
    SepaCreditorIdentifier: `scalar.SepaCreditorIdentifier`,
    SEPACreditTransferCreditor: {
        '...on SEPACreditTransferInCreditor': 'SEPACreditTransferInCreditor',
        '...on SEPACreditTransferInternalOutCreditor': 'SEPACreditTransferInternalOutCreditor',
        '...on SEPACreditTransferOutCreditor': 'SEPACreditTransferOutCreditor',
        name: 'String',
        maskedIBAN: 'String',
        IBAN: 'String',
        BIC: 'String',
    },
    SEPACreditTransferDebtor: {
        '...on SEPACreditTransferInDebtor': 'SEPACreditTransferInDebtor',
        '...on SEPACreditTransferInternalInDebtor': 'SEPACreditTransferInternalInDebtor',
        '...on SEPACreditTransferOutDebtor': 'SEPACreditTransferOutDebtor',
        name: 'String',
        maskedIBAN: 'String',
        IBAN: 'String',
        BIC: 'String',
    },
    SEPACreditTransferInCreditor: {
        name: 'String',
        maskedIBAN: 'String',
        IBAN: 'String',
        BIC: 'String',
        virtualIBANEntryId: 'ID',
        accountNumber: 'AccountNumber',
    },
    SEPACreditTransferInDebtor: {
        name: 'String',
        maskedIBAN: 'String',
        IBAN: 'String',
        BIC: 'String',
        virtualIBANEntryId: 'ID',
    },
    SEPACreditTransferInternalInDebtor: {
        name: 'String',
        maskedIBAN: 'String',
        IBAN: 'String',
        BIC: 'String',
        virtualIBANEntryId: 'ID',
        accountNumber: 'AccountNumber',
    },
    SEPACreditTransferInternalOutCreditor: {
        name: 'String',
        maskedIBAN: 'String',
        IBAN: 'String',
        BIC: 'String',
        virtualIBANEntryId: 'ID',
        accountNumber: 'AccountNumber',
        beneficiary: 'InternalBeneficiary',
    },
    SEPACreditTransferOutCreditor: {
        name: 'String',
        maskedIBAN: 'String',
        IBAN: 'String',
        BIC: 'String',
        beneficiary: 'SEPABeneficiary',
    },
    SEPACreditTransferOutDebtor: {
        name: 'String',
        maskedIBAN: 'String',
        IBAN: 'String',
        BIC: 'String',
        virtualIBANEntryId: 'ID',
        accountNumber: 'AccountNumber',
    },
    SEPACreditTransferTransaction: {
        id: 'ID',
        reference: 'String',
        paymentMethodIdentifier: 'String',
        side: 'TransactionSide',
        type: 'TransactionTypeEnum',
        amount: 'Amount',
        label: 'String',
        statusInfo: 'TransactionStatusInfo',
        paymentId: 'String',
        payment: 'Payment',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        counterparty: 'String',
        bookedBalanceAfter: 'Amount',
        paymentProduct: 'PaymentProduct',
        creditor: 'SEPACreditTransferCreditor',
        debtor: 'SEPACreditTransferDebtor',
        account: 'Account',
        externalReference: 'String',
        executionDate: 'DateTime',
        requestedExecutionAt: 'DateTime',
        originTransactionId: 'String',
        originTransaction: 'Transaction',
        returnReason: 'TransactionReasonCode',
    },
    SepaDirectDebitB2BMerchantPaymentMethod: {
        id: 'ID',
        type: 'MerchantPaymentMethodType',
        methodId: 'ID',
        statusInfo: 'MerchantPaymentMethodStatusInfo',
        version: 'Int',
        updatedAt: 'Date',
        rollingReserve: 'RollingReserve',
        useSwanSepaCreditorIdentifier: 'Boolean',
        sepaCreditorIdentifier: 'String',
    },
    SepaDirectDebitCoreMerchantPaymentMethod: {
        id: 'ID',
        type: 'MerchantPaymentMethodType',
        methodId: 'ID',
        statusInfo: 'MerchantPaymentMethodStatusInfo',
        version: 'Int',
        updatedAt: 'Date',
        rollingReserve: 'RollingReserve',
        useSwanSepaCreditorIdentifier: 'Boolean',
        sepaCreditorIdentifier: 'String',
    },
    SEPADirectDebitCreditor: {
        '...on SEPADirectDebitInCreditor': 'SEPADirectDebitInCreditor',
        '...on SEPADirectDebitOutCreditor': 'SEPADirectDebitOutCreditor',
        name: 'String',
        maskedIBAN: 'String',
        IBAN: 'String',
        BIC: 'String',
    },
    SEPADirectDebitDebtor: {
        '...on SEPADirectDebitInDebtor': 'SEPADirectDebitInDebtor',
        '...on SEPADirectDebitOutDebtor': 'SEPADirectDebitOutDebtor',
        name: 'String',
        maskedIBAN: 'String',
        IBAN: 'String',
        BIC: 'String',
    },
    SEPADirectDebitInCreditor: {
        name: 'String',
        maskedIBAN: 'String',
        IBAN: 'String',
        BIC: 'String',
        virtualIBANEntryId: 'ID',
        accountNumber: 'AccountNumber',
    },
    SEPADirectDebitInDebtor: {
        name: 'String',
        maskedIBAN: 'String',
        IBAN: 'String',
        BIC: 'String',
        virtualIBANEntryId: 'ID',
        beneficiary: 'SEPABeneficiary',
    },
    SEPADirectDebitMandate: {
        '...on SEPAPaymentDirectDebitMandate': 'SEPAPaymentDirectDebitMandate',
        '...on SEPAReceivedDirectDebitMandate': 'SEPAReceivedDirectDebitMandate',
        id: 'ID',
    },
    SEPADirectDebitOutCreditor: {
        name: 'String',
        maskedIBAN: 'String',
        IBAN: 'String',
        BIC: 'String',
        beneficiary: 'SEPABeneficiary',
        virtualIBANEntryId: 'ID',
    },
    SEPADirectDebitOutDebtor: {
        name: 'String',
        maskedIBAN: 'String',
        IBAN: 'String',
        BIC: 'String',
        virtualIBANEntryId: 'ID',
        accountNumber: 'AccountNumber',
    },
    SEPADirectDebitTransaction: {
        id: 'ID',
        reference: 'String',
        paymentMethodIdentifier: 'String',
        side: 'TransactionSide',
        type: 'TransactionTypeEnum',
        amount: 'Amount',
        label: 'String',
        statusInfo: 'TransactionStatusInfo',
        paymentId: 'String',
        payment: 'Payment',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        counterparty: 'String',
        bookedBalanceAfter: 'Amount',
        paymentProduct: 'PaymentProduct',
        creditor: 'SEPADirectDebitCreditor',
        debtor: 'SEPADirectDebitDebtor',
        account: 'Account',
        mandate: 'SEPADirectDebitMandate',
        externalReference: 'String',
        executionDate: 'DateTime',
        requestedExecutionAt: 'DateTime',
        originTransactionId: 'String',
        originTransaction: 'Transaction',
        reservedAmount: 'Amount',
        reservedAmountReleasedAt: 'DateTime',
        returnReason: 'TransactionReasonCode',
    },
    SEPAPaymentDirectDebitMandate: {
        id: 'ID',
        transactions: 'TransactionConnection',
        reference: 'String',
        scheme: 'SEPAPaymentMandateScheme',
        statusInfo: 'PaymentMandateStatusInfo',
        sequence: 'SEPAPaymentMandateSequence',
        mandateDocumentUrl: 'String',
        debtor: 'SEPAPaymentMandateDebtor',
        ultimateCreditorName: 'String',
        creditor: 'SEPAPaymentMandateCreditor',
        signatureDate: 'Date',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        executedAt: 'DateTime',
        expiredAt: 'Date',
        accountHolder: 'AccountHolder',
        name: 'String',
    },
    SEPAPaymentMandateCreditor: {
        id: 'ID',
        identifier: 'SepaCreditorIdentifier',
        name: 'String',
        address: 'Address',
    },
    SEPAPaymentMandateDebtor: {
        name: 'String',
        iban: 'IBAN',
        email: 'String',
        country: 'CCA3',
        address: 'Address',
    },
    SEPAReceivedDirectDebitMandate: {
        id: 'ID',
        transactions: 'TransactionConnection',
        version: 'String',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        reference: 'String',
        scheme: 'SEPAReceivedDirectDebitMandateScheme',
        sequence: 'SEPAReceivedDirectDebitMandateSequence',
        creditor: 'SEPAReceivedDirectDebitMandateCreditor',
        ultimateCreditorName: 'String',
        executedAt: 'DateTime',
        signatureDate: 'Date',
        expiredAt: 'Date',
        statusInfo: 'ReceivedDirectDebitMandateStatusInfo',
        account: 'Account',
        iban: 'IBAN',
        name: 'String',
    },
    SEPAReceivedDirectDebitMandateCreditor: {
        identifier: 'String',
        name: 'String',
        address: 'Address',
    },
    SepaReference: `scalar.SepaReference`,
    ServerConsentCredentialsNotValidOrOutdatedRejection: {
        message: 'String',
    },
    ServerConsentNotAllowedForConsentOperationRejection: {
        message: 'String',
    },
    ServerConsentNotAllowedForProjectRejection: {
        message: 'String',
    },
    ServerConsentProjectCredentialMissingRejection: {
        message: 'String',
    },
    ServerConsentProjectCredentialNotFoundRejection: {
        message: 'String',
    },
    ServerConsentProjectSettingsNotFoundRejection: {
        message: 'String',
    },
    ServerConsentSignatureNotValidRejection: {
        message: 'String',
    },
    Shareholder: {
        id: 'ID',
        capitalDepositAmount: 'Amount',
        onboarding: 'Onboarding',
        accountId: 'String',
        status: 'ShareholderStatus',
        info: 'ShareholderInfo',
        documents: 'CapitalDepositDocument',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        relatedCapitalDepositCase: 'CapitalDepositCase',
    },
    ShareholderInfo: {
        '...on IndividualShareholder': 'IndividualShareholder',
        '...on CompanyShareholder': 'CompanyShareholder',
    },
    Spending: {
        period: 'SpendingLimitPeriod',
        amount: 'Amount',
    },
    SpendingLimit: {
        type: 'SpendingLimitType',
        period: 'SpendingLimitPeriod',
        amount: 'Amount',
    },
    StandingOrder: {
        id: 'ID',
        payments: 'PaymentConnection',
        reference: 'String',
        label: 'String',
        amount: 'Amount',
        targetAvailableBalance: 'Amount',
        period: 'StandingOrderPeriod',
        firstExecutionDate: 'DateTime',
        lastExecutionDate: 'DateTime',
        sepaBeneficiary: 'SEPABeneficiary',
        statusInfo: 'StandingOrderStatusInfo',
        createdAt: 'Date',
        updatedAt: 'Date',
        account: 'Account',
        createdBy: 'User',
        nextExecutionDate: 'Date',
        creditTransferMode: 'CreditTransferMode',
    },
    StandingOrderCanceledStatusInfo: {
        canceledAt: 'Date',
        status: 'StandingOrderStatus',
    },
    StandingOrderConnection: {
        pageInfo: 'PageInfo',
        edges: 'StandingOrderEdge',
        totalCount: 'Int',
    },
    StandingOrderConsentPendingStatusInfo: {
        status: 'StandingOrderStatus',
        consent: 'Consent',
    },
    StandingOrderEdge: {
        node: 'StandingOrder',
        cursor: 'String',
    },
    StandingOrderEnabledStatusInfo: {
        status: 'StandingOrderStatus',
    },
    StandingOrderNotFoundRejection: {
        message: 'String',
    },
    StandingOrderStatusInfo: {
        '...on StandingOrderCanceledStatusInfo': 'StandingOrderCanceledStatusInfo',
        '...on StandingOrderConsentPendingStatusInfo': 'StandingOrderConsentPendingStatusInfo',
        '...on StandingOrderEnabledStatusInfo': 'StandingOrderEnabledStatusInfo',
        status: 'StandingOrderStatus',
    },
    StartedIdentificationLevelStatusInfo: {
        status: 'SwanIdentificationStatus',
    },
    Statement: {
        id: 'ID',
        account: 'Account',
        openingBalance: 'Amount',
        closingBalance: 'Amount',
        openingDate: 'DateTime',
        closingDate: 'DateTime',
        status: 'StatementStatus',
        period: 'StatementPeriod',
        totalCredits: 'Amount',
        totalDebits: 'Amount',
        fees: 'Amount',
        type: 'StatementInfo',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
    },
    StatementConnection: {
        pageInfo: 'PageInfo',
        totalCount: 'Int',
        edges: 'StatementEdge',
    },
    StatementEdge: {
        node: 'Statement',
        cursor: 'String',
    },
    StatementInfo: {
        '...on CsvStatement': 'CsvStatement',
        '...on PdfStatement': 'PdfStatement',
        type: 'StatementType',
    },
    SupportingDocument: {
        id: 'String',
        statusInfo: 'SupportingDocumentStatusInfo',
        supportingDocumentType: 'SupportingDocumentType',
        supportingDocumentPurpose: 'SupportingDocumentPurposeEnum',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
    },
    SupportingDocumentAccountHolder: {
        id: 'ID',
    },
    SupportingDocumentCollection: {
        id: 'String',
        statusInfo: 'SupportingDocumentCollectionStatusInfo',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        supportingDocuments: 'SupportingDocument',
        requiredSupportingDocumentPurposes: 'SupportingDocumentPurpose',
        accountHolder: 'SupportingDocumentAccountHolder',
        onboarding: 'SupportingDocumentOnboarding',
        projectInfo: 'ProjectInfo',
    },
    SupportingDocumentCollectionApprovedStatusInfo: {
        status: 'SupportingDocumentCollectionStatus',
        approvedAt: 'DateTime',
    },
    SupportingDocumentCollectionCanceledStatusInfo: {
        status: 'SupportingDocumentCollectionStatus',
        canceledAt: 'DateTime',
    },
    SupportingDocumentCollectionConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'SupportingDocumentCollectionEdge',
    },
    SupportingDocumentCollectionEdge: {
        cursor: 'String',
        node: 'SupportingDocumentCollection',
    },
    SupportingDocumentCollectionNotFoundRejection: {
        id: 'String',
        message: 'String',
    },
    SupportingDocumentCollectionPendingReviewStatusInfo: {
        status: 'SupportingDocumentCollectionStatus',
    },
    SupportingDocumentCollectionRejectedStatusInfo: {
        status: 'SupportingDocumentCollectionStatus',
        rejectedAt: 'DateTime',
    },
    SupportingDocumentCollectionStatusDoesNotAllowDeletionRejection: {
        message: 'String',
        supportingDocumentCollectionStatus: 'SupportingDocumentCollectionStatus',
        supportingDocumentCollection: 'SupportingDocumentCollection',
    },
    SupportingDocumentCollectionStatusDoesNotAllowUpdateRejection: {
        message: 'String',
        supportingDocumentCollectionStatus: 'SupportingDocumentCollectionStatus',
        supportingDocumentCollection: 'SupportingDocumentCollection',
    },
    SupportingDocumentCollectionStatusInfo: {
        '...on SupportingDocumentCollectionApprovedStatusInfo': 'SupportingDocumentCollectionApprovedStatusInfo',
        '...on SupportingDocumentCollectionCanceledStatusInfo': 'SupportingDocumentCollectionCanceledStatusInfo',
        '...on SupportingDocumentCollectionPendingReviewStatusInfo': 'SupportingDocumentCollectionPendingReviewStatusInfo',
        '...on SupportingDocumentCollectionRejectedStatusInfo': 'SupportingDocumentCollectionRejectedStatusInfo',
        '...on SupportingDocumentCollectionWaitingForDocumentStatusInfo': 'SupportingDocumentCollectionWaitingForDocumentStatusInfo',
        status: 'SupportingDocumentCollectionStatus',
    },
    SupportingDocumentCollectionStatusNotAllowedRejection: {
        oldStatus: 'SupportingDocumentCollectionStatus',
        newStatus: 'SupportingDocumentCollectionStatus',
        message: 'String',
    },
    SupportingDocumentCollectionWaitingForDocumentStatusInfo: {
        status: 'SupportingDocumentCollectionStatus',
    },
    SupportingDocumentNotFoundRejection: {
        id: 'String',
        message: 'String',
    },
    SupportingDocumentNotUploadedStatusInfo: {
        status: 'SupportingDocumentStatus',
    },
    SupportingDocumentOnboarding: {
        id: 'ID',
    },
    SupportingDocumentPostField: {
        key: 'String',
        value: 'String',
    },
    SupportingDocumentPurpose: {
        name: 'SupportingDocumentPurposeEnum',
        acceptableSupportingDocumentTypes: 'SupportingDocumentType',
    },
    SupportingDocumentRefusedStatusInfo: {
        status: 'SupportingDocumentStatus',
        downloadUrl: 'String',
        refusedAt: 'DateTime',
        reason: 'String',
        filename: 'String',
    },
    SupportingDocumentSettings: {
        collectMode: 'SupportingDocumentCollectMode',
        communicationLanguage: 'SupportingDocumentCommunicationLanguageSettings',
        emailContact: 'String',
    },
    SupportingDocumentStatusDoesNotAllowDeletionRejection: {
        supportingDocument: 'SupportingDocument',
        status: 'SupportingDocumentStatus',
        message: 'String',
    },
    SupportingDocumentStatusDoesNotAllowUpdateRejection: {
        supportingDocument: 'SupportingDocument',
        status: 'SupportingDocumentStatus',
        message: 'String',
    },
    SupportingDocumentStatusInfo: {
        '...on SupportingDocumentNotUploadedStatusInfo': 'SupportingDocumentNotUploadedStatusInfo',
        '...on SupportingDocumentRefusedStatusInfo': 'SupportingDocumentRefusedStatusInfo',
        '...on SupportingDocumentUploadedStatusInfo': 'SupportingDocumentUploadedStatusInfo',
        '...on SupportingDocumentValidatedStatusInfo': 'SupportingDocumentValidatedStatusInfo',
        '...on SupportingDocumentWaitingForUploadStatusInfo': 'SupportingDocumentWaitingForUploadStatusInfo',
        status: 'SupportingDocumentStatus',
    },
    SupportingDocumentStatusNotAllowedRejection: {
        oldStatus: 'SupportingDocumentStatus',
        newStatus: 'SupportingDocumentStatus',
        message: 'String',
    },
    SupportingDocumentUploadedStatusInfo: {
        status: 'SupportingDocumentStatus',
        downloadUrl: 'String',
        filename: 'String',
    },
    SupportingDocumentUploadInfo: {
        url: 'String',
        fields: 'SupportingDocumentPostField',
    },
    SupportingDocumentUploadNotAllowedRejection: {
        supportingDocumentCollectionStatus: 'SupportingDocumentCollectionStatus',
        message: 'String',
    },
    SupportingDocumentValidatedStatusInfo: {
        status: 'SupportingDocumentStatus',
        downloadUrl: 'String',
        validatedAt: 'DateTime',
        filename: 'String',
        reason: 'String',
    },
    SupportingDocumentWaitingForUploadStatusInfo: {
        status: 'SupportingDocumentStatus',
        upload: 'SupportingDocumentUploadInfo',
    },
    SuspendAccountMembershipPayload: {
        '...on SuspendAccountMembershipSuccessPayload': 'SuspendAccountMembershipSuccessPayload',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on LegalRepresentativeAccountMembershipCannotBeSuspendedRejection': 'LegalRepresentativeAccountMembershipCannotBeSuspendedRejection',
        '...on UserNotAllowedToManageAccountMembershipRejection': 'UserNotAllowedToManageAccountMembershipRejection',
        '...on UserNotAllowedToSuspendItsOwnAccountMembershipRejection': 'UserNotAllowedToSuspendItsOwnAccountMembershipRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    SuspendAccountMembershipSuccessPayload: {
        accountMembership: 'AccountMembership',
    },
    SuspendAccountReason: {
        type: 'SuspendAccountReasonType',
        message: 'String',
    },
    SuspendAccountStatusReason: {
        '...on SuspendAccountReason': 'SuspendAccountReason',
    },
    SuspendedFundingLimitSettingsStatusInfo: {
        status: 'FundingLimitSettingsStatus',
        reason: 'String',
    },
    SuspendedFundingSourceStatusInfo: {
        status: 'FundingSourceStatus',
        suspendedAt: 'Date',
    },
    SuspendedMerchantPaymentMethodStatusInfo: {
        status: 'MerchantPaymentMethodStatus',
        suspendedAt: 'Date',
    },
    SuspendedMerchantProfileStatusInfo: {
        status: 'MerchantProfileStatus',
        suspendedAt: 'Date',
    },
    SuspendPhysicalCardPayload: {
        '...on SuspendPhysicalCardSuccessPayload': 'SuspendPhysicalCardSuccessPayload',
        '...on AccountMembershipNotAllowedRejection': 'AccountMembershipNotAllowedRejection',
        '...on CardNotFoundRejection': 'CardNotFoundRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on PhysicalCardNotFoundRejection': 'PhysicalCardNotFoundRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    SuspendPhysicalCardSuccessPayload: {
        physicalCard: 'PhysicalCard',
    },
    SuspendReceivedDirectDebitMandatedRejection: {
        message: 'String',
        reason: 'SuspendReceivedDirectDebitMandatedRejectionReason',
    },
    SuspendReceivedDirectDebitMandatePayload: {
        '...on SuspendReceivedDirectDebitMandateSuccessPayload': 'SuspendReceivedDirectDebitMandateSuccessPayload',
        '...on SuspendReceivedDirectDebitMandatedRejection': 'SuspendReceivedDirectDebitMandatedRejection',
        '...on ReceivedDirectDebitMandateNotFoundRejection': 'ReceivedDirectDebitMandateNotFoundRejection',
        '...on ReceivedDirectDebitMandateCanceledRejection': 'ReceivedDirectDebitMandateCanceledRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
    },
    SuspendReceivedDirectDebitMandateSuccessPayload: {
        receivedDirectDebitMandate: 'ReceivedDirectDebitMandate',
    },
    SwanTCUDocumentNotFoundRejection: {
        message: 'String',
    },
    SwanTCUDocumentStatusNotAllowedRejection: {
        message: 'String',
    },
    TextField: {
        displayFormat: 'String',
        example: 'String',
        key: 'String',
        maxLength: 'Int',
        minLength: 'Int',
        name: 'String',
        refreshDynamicFieldsOnChange: 'Boolean',
        required: 'Boolean',
        validationRegex: 'String',
    },
    TokenRequestorId: `scalar.TokenRequestorId`,
    TooManyChildConsentsRejection: {
        message: 'String',
    },
    TooManyItemsRejection: {
        message: 'String',
    },
    Transaction: {
        '...on CardTransaction': 'CardTransaction',
        '...on CheckTransaction': 'CheckTransaction',
        '...on FeeTransaction': 'FeeTransaction',
        '...on InternalCreditTransfer': 'InternalCreditTransfer',
        '...on InternalDirectDebitTransaction': 'InternalDirectDebitTransaction',
        '...on InternationalCreditTransferTransaction': 'InternationalCreditTransferTransaction',
        '...on SEPACreditTransferTransaction': 'SEPACreditTransferTransaction',
        '...on SEPADirectDebitTransaction': 'SEPADirectDebitTransaction',
        id: 'ID',
        reference: 'String',
        paymentMethodIdentifier: 'String',
        side: 'TransactionSide',
        type: 'TransactionTypeEnum',
        amount: 'Amount',
        label: 'String',
        statusInfo: 'TransactionStatusInfo',
        paymentId: 'String',
        payment: 'Payment',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        counterparty: 'String',
        bookedBalanceAfter: 'Amount',
        paymentProduct: 'PaymentProduct',
        account: 'Account',
        externalReference: 'String',
        executionDate: 'DateTime',
        requestedExecutionAt: 'DateTime',
        originTransactionId: 'String',
        originTransaction: 'Transaction',
    },
    TransactionConnection: {
        pageInfo: 'PageInfo',
        totalCount: 'Int',
        edges: 'TransactionEdge',
    },
    TransactionEdge: {
        node: 'Transaction',
        cursor: 'String',
    },
    TransactionNotFoundRejection: {
        transactionId: 'ID',
        message: 'String',
    },
    TransactionStatusInfo: {
        '...on BookedTransactionStatusInfo': 'BookedTransactionStatusInfo',
        '...on CanceledTransactionStatusInfo': 'CanceledTransactionStatusInfo',
        '...on PendingTransactionStatusInfo': 'PendingTransactionStatusInfo',
        '...on RejectedTransactionStatusInfo': 'RejectedTransactionStatusInfo',
        '...on ReleasedTransactionStatusInfo': 'ReleasedTransactionStatusInfo',
        '...on UpcomingTransactionStatusInfo': 'UpcomingTransactionStatusInfo',
        status: 'TransactionStatus',
    },
    TrustedBeneficiary: {
        '...on TrustedInternalBeneficiary': 'TrustedInternalBeneficiary',
        '...on TrustedInternationalBeneficiary': 'TrustedInternationalBeneficiary',
        '...on TrustedSepaBeneficiary': 'TrustedSepaBeneficiary',
        id: 'ID',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        name: 'String',
        label: 'String',
        statusInfo: 'TrustedBeneficiaryStatusInfo',
        type: 'BeneficiaryType',
    },
    TrustedBeneficiaryConnection: {
        pageInfo: 'PageInfo',
        edges: 'TrustedBeneficiaryEdge',
        totalCount: 'Int',
    },
    TrustedBeneficiaryConsentPending: {
        status: 'TrustedBeneficiaryStatus',
        consent: 'Consent',
    },
    TrustedBeneficiaryEdge: {
        node: 'TrustedBeneficiary',
        cursor: 'String',
    },
    TrustedBeneficiaryStatusInfo: {
        '...on TrustedBeneficiaryConsentPending': 'TrustedBeneficiaryConsentPending',
        '...on TrustedBeneficiaryStatusInfoCanceled': 'TrustedBeneficiaryStatusInfoCanceled',
        '...on TrustedBeneficiaryStatusInfoEnabled': 'TrustedBeneficiaryStatusInfoEnabled',
        status: 'TrustedBeneficiaryStatus',
    },
    TrustedBeneficiaryStatusInfoCanceled: {
        status: 'TrustedBeneficiaryStatus',
        canceledAt: 'DateTime',
    },
    TrustedBeneficiaryStatusInfoEnabled: {
        status: 'TrustedBeneficiaryStatus',
        enabledAt: 'DateTime',
    },
    TrustedInternalBeneficiary: {
        id: 'ID',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        name: 'String',
        label: 'String',
        statusInfo: 'TrustedBeneficiaryStatusInfo',
        type: 'BeneficiaryType',
        accountId: 'ID',
    },
    TrustedInternationalBeneficiary: {
        id: 'ID',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        name: 'String',
        label: 'String',
        statusInfo: 'TrustedBeneficiaryStatusInfo',
        type: 'BeneficiaryType',
        currency: 'Currency',
        details: 'KeyValue',
        route: 'InternationalCreditTransferRouteInput',
    },
    TrustedSepaBeneficiary: {
        id: 'ID',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        name: 'String',
        label: 'String',
        statusInfo: 'TrustedBeneficiaryStatusInfo',
        type: 'BeneficiaryType',
        iban: 'IBAN',
        address: 'Address',
    },
    UltimateBeneficialDirectOwnerCompanyInfo: {
        id: 'ID',
        type: 'UltimateBeneficialOwnerType',
        parentCompanyShareRatio: 'Float',
        name: 'String',
        registrationNumber: 'String',
    },
    UltimateBeneficialDirectOwnerIndividualInfo: {
        id: 'ID',
        type: 'UltimateBeneficialOwnerType',
        parentCompanyShareRatio: 'Float',
        firstName: 'String',
        lastName: 'String',
        birthDate: 'Date',
    },
    UltimateBeneficialIndirectOwnerCompanyInfo: {
        id: 'ID',
        type: 'UltimateBeneficialOwnerType',
        parentCompanyReference: 'String',
        parentCompanyShareRatio: 'Float',
        name: 'String',
        registrationNumber: 'String',
    },
    UltimateBeneficialIndirectOwnerIndividualInfo: {
        id: 'ID',
        type: 'UltimateBeneficialOwnerType',
        parentCompanyReference: 'String',
        parentCompanyShareRatio: 'Float',
        firstName: 'String',
        lastName: 'String',
        birthDate: 'Date',
    },
    UltimateBeneficialOwnerInfo: {
        '...on UltimateBeneficialDirectOwnerCompanyInfo': 'UltimateBeneficialDirectOwnerCompanyInfo',
        '...on UltimateBeneficialDirectOwnerIndividualInfo': 'UltimateBeneficialDirectOwnerIndividualInfo',
        '...on UltimateBeneficialIndirectOwnerCompanyInfo': 'UltimateBeneficialIndirectOwnerCompanyInfo',
        '...on UltimateBeneficialIndirectOwnerIndividualInfo': 'UltimateBeneficialIndirectOwnerIndividualInfo',
        id: 'ID',
        type: 'UltimateBeneficialOwnerType',
        parentCompanyShareRatio: 'Float',
    },
    UpcomingTransactionStatusInfo: {
        status: 'TransactionStatus',
        executionDate: 'DateTime',
    },
    UpdateAccountHolderPayload: {
        '...on UpdateAccountHolderSuccessPayload': 'UpdateAccountHolderSuccessPayload',
        '...on AccountHolderNotFoundRejection': 'AccountHolderNotFoundRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    UpdateAccountHolderSuccessPayload: {
        accountHolder: 'AccountHolder',
    },
    UpdateAccountMembershipPayload: {
        '...on UpdateAccountMembershipSuccessPayload': 'UpdateAccountMembershipSuccessPayload',
        '...on AccountMembershipCannotBeUpdatedRejection': 'AccountMembershipCannotBeUpdatedRejection',
        '...on AccountMembershipNotFoundRejection': 'AccountMembershipNotFoundRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on InvalidPhoneNumberRejection': 'InvalidPhoneNumberRejection',
        '...on PermissionCannotBeGrantedRejection': 'PermissionCannotBeGrantedRejection',
        '...on UserNotAllowedToManageAccountMembershipRejection': 'UserNotAllowedToManageAccountMembershipRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    UpdateAccountMembershipSuccessPayload: {
        consent: 'Consent',
    },
    UpdateAccountPayload: {
        '...on UpdateAccountSuccessPayload': 'UpdateAccountSuccessPayload',
        '...on AccountNotFoundRejection': 'AccountNotFoundRejection',
        '...on BadAccountStatusRejection': 'BadAccountStatusRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    UpdateAccountSuccessPayload: {
        account: 'Account',
    },
    UpdateCardPayload: {
        '...on UpdateCardSuccessPayload': 'UpdateCardSuccessPayload',
        '...on AccountNotFoundRejection': 'AccountNotFoundRejection',
        '...on CardNotFoundRejection': 'CardNotFoundRejection',
        '...on AccountMembershipNotAllowedRejection': 'AccountMembershipNotAllowedRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    UpdateCardSuccessPayload: {
        consent: 'Consent',
    },
    UpdateCompanyOnboardingPayload: {
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on UpdateCompanyOnboardingSuccessPayload': 'UpdateCompanyOnboardingSuccessPayload',
        '...on ValidationRejection': 'ValidationRejection',
    },
    UpdateCompanyOnboardingSuccessPayload: {
        onboarding: 'OnboardingInfo',
    },
    UpdateIndividualOnboardingPayload: {
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on UpdateIndividualOnboardingSuccessPayload': 'UpdateIndividualOnboardingSuccessPayload',
        '...on ValidationRejection': 'ValidationRejection',
    },
    UpdateIndividualOnboardingSuccessPayload: {
        onboarding: 'OnboardingInfo',
    },
    UpdateReceivedSepaDirectDebitB2bMandatePayload: {
        '...on UpdateReceivedSepaDirectDebitB2bMandateSuccessPayload': 'UpdateReceivedSepaDirectDebitB2bMandateSuccessPayload',
        '...on ReceivedDirectDebitMandateNotFoundRejection': 'ReceivedDirectDebitMandateNotFoundRejection',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on ReceivedDirectDebitMandateAlreadyExistRejection': 'ReceivedDirectDebitMandateAlreadyExistRejection',
        '...on ReceivedDirectDebitMandateNotB2bRejection': 'ReceivedDirectDebitMandateNotB2bRejection',
        '...on AccountNotFoundRejection': 'AccountNotFoundRejection',
    },
    UpdateReceivedSepaDirectDebitB2bMandateSuccessPayload: {
        receivedDirectDebitMandate: 'ReceivedDirectDebitMandate',
    },
    UpdateSupportingDocumentPayload: {
        '...on UpdateSupportingDocumentSuccessPayload': 'UpdateSupportingDocumentSuccessPayload',
        '...on ForbiddenRejection': 'ForbiddenRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on SupportingDocumentCollectionNotFoundRejection': 'SupportingDocumentCollectionNotFoundRejection',
        '...on SupportingDocumentCollectionStatusDoesNotAllowUpdateRejection': 'SupportingDocumentCollectionStatusDoesNotAllowUpdateRejection',
        '...on SupportingDocumentNotFoundRejection': 'SupportingDocumentNotFoundRejection',
        '...on SupportingDocumentStatusDoesNotAllowUpdateRejection': 'SupportingDocumentStatusDoesNotAllowUpdateRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    UpdateSupportingDocumentSuccessPayload: {
        supportingDocument: 'SupportingDocument',
    },
    UpdateUserConsentSettingsPayload: {
        '...on UpdateUserConsentSettingsSuccessPayload': 'UpdateUserConsentSettingsSuccessPayload',
        '...on UpdateUserConsentSettingsTokenRejection': 'UpdateUserConsentSettingsTokenRejection',
    },
    UpdateUserConsentSettingsSuccessPayload: {
        userConsentSettings: 'UserConsentSettings',
    },
    UpdateUserConsentSettingsTokenRejection: {
        message: 'String',
    },
    Upload: `scalar.Upload`,
    URL: `scalar.URL`,
    User: {
        id: 'ID',
        accountMemberships: 'AccountMembershipConnection',
        mobilePhoneNumber: 'PhoneNumber',
        firstName: 'String',
        lastName: 'String',
        allFirstNames: 'String',
        birthDate: 'Date',
        nationalityCCA3: 'CCA3',
        idVerified: 'Boolean',
        authenticators: 'Authenticator',
        identificationStatus: 'IdentificationStatus',
        identificationLevels: 'IdentificationLevels',
        preferredNotificationChannel: 'PreferredNotificationChannel',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        joinedAt: 'DateTime',
        identifications: 'IdentificationConnection',
    },
    UserConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'UserEdge',
    },
    UserConsentSettings: {
        preferredNotificationChannel: 'PreferredNotificationChannel',
        userId: 'String',
        projectId: 'String',
    },
    UserEdge: {
        cursor: 'String',
        node: 'User',
    },
    UserNotAllowedToDisableItsOwnAccountMembershipRejection: {
        accountMembershipId: 'String',
        message: 'String',
    },
    UserNotAllowedToManageAccountMembershipRejection: {
        message: 'String',
    },
    UserNotAllowedToSuspendItsOwnAccountMembershipRejection: {
        accountMembershipId: 'String',
        message: 'String',
    },
    UserNotCardHolderRejection: {
        message: 'String',
    },
    ValidationError: {
        field: 'String',
        errors: 'FieldValidationError',
    },
    ValidationFieldError: {
        code: 'ValidationFieldErrorCode',
        message: 'String',
        path: 'String',
    },
    ValidationRejection: {
        fields: 'ValidationFieldError',
        message: 'String',
    },
    ValidIban: {
        iban: 'IBAN',
        accountNumber: 'String',
        checksum: 'String',
        bank: 'Bank',
        reachability: 'Reachability',
    },
    ValidIdentificationLevelStatusInfo: {
        status: 'SwanIdentificationStatus',
    },
    VerifiedStatusInfo: {
        verifiedAt: 'DateTime',
        status: 'AccountVerificationStatus',
    },
    ViewCardNumbersPayload: {
        '...on ViewCardNumbersSuccessPayload': 'ViewCardNumbersSuccessPayload',
        '...on UserNotCardHolderRejection': 'UserNotCardHolderRejection',
        '...on CardNotFoundRejection': 'CardNotFoundRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    ViewCardNumbersSuccessPayload: {
        consent: 'Consent',
    },
    ViewPhysicalCardNumbersPayload: {
        '...on ViewPhysicalCardNumbersSuccessPayload': 'ViewPhysicalCardNumbersSuccessPayload',
        '...on UserNotCardHolderRejection': 'UserNotCardHolderRejection',
        '...on CardNotFoundRejection': 'CardNotFoundRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    ViewPhysicalCardNumbersSuccessPayload: {
        consent: 'Consent',
    },
    ViewPhysicalCardPinPayload: {
        '...on ViewPhysicalCardPinSuccessPayload': 'ViewPhysicalCardPinSuccessPayload',
        '...on CardNotFoundRejection': 'CardNotFoundRejection',
        '...on PhysicalCardNotFoundRejection': 'PhysicalCardNotFoundRejection',
        '...on PINNotReadyRejection': 'PINNotReadyRejection',
        '...on UserNotCardHolderRejection': 'UserNotCardHolderRejection',
        '...on ValidationRejection': 'ValidationRejection',
    },
    ViewPhysicalCardPinSuccessPayload: {
        consent: 'Consent',
    },
    VirtualIBANEntry: {
        id: 'ID',
        IBAN: 'IBAN',
        BIC: 'BIC',
        label: 'String',
        status: 'IBANStatus',
        blockSDD: 'Boolean',
    },
    VirtualIBANEntryConnection: {
        totalCount: 'Int',
        pageInfo: 'PageInfo',
        edges: 'VirtualIBANEntryEdge',
    },
    VirtualIBANEntryEdge: {
        cursor: 'String',
        node: 'VirtualIBANEntry',
    },
    WalletProvider: {
        name: 'String',
        id: 'String',
    },
    WalletToken: `scalar.WalletToken`,
    WebBankingSettings: {
        canViewAccountDetails: 'Boolean',
        canViewAccountStatement: 'Boolean',
        canManageVirtualIbans: 'Boolean',
        canInitiatePaymentsToNewBeneficiaries: 'Boolean',
        canViewPaymentList: 'Boolean',
        canOrderVirtualCards: 'Boolean',
        canOrderPhysicalCards: 'Boolean',
        canViewMembers: 'Boolean',
        canAddNewMembers: 'Boolean',
    },
    WebhookEventLog: {
        id: 'ID',
        createdAt: 'DateTime',
        eventId: 'ID',
        eventDate: 'DateTime',
        eventType: 'String',
        resourceId: 'ID',
        duration: 'Int',
        requestPayload: 'String',
        responsePayload: 'String',
        statusCode: 'Int',
        statusText: 'StatusText',
        webhookSubscription: 'WebhookSubscription',
        retryCount: 'Int',
        webhookSubscriptionLabel: 'String',
        webhookSubscriptionEndpoint: 'String',
    },
    WebhookEventLogNotFoundRejection: {
        message: 'String',
    },
    WebhookSubscription: {
        id: 'ID',
        label: 'String',
        endpoint: 'String',
        secret: 'String',
        eventTypes: 'ID',
        createdAt: 'DateTime',
        updatedAt: 'DateTime',
        statusInfo: 'WebhookSubscriptionStatusInfo',
        kpi: 'WebhookSubscriptionKpi',
    },
    WebhookSubscriptionBrokenStatusInfo: {
        status: 'WebhookSubscriptionStatus',
        brokenAt: 'DateTime',
    },
    WebhookSubscriptionDisabledStatusInfo: {
        status: 'WebhookSubscriptionStatus',
        disabledAt: 'DateTime',
    },
    WebhookSubscriptionEnabledStatusInfo: {
        status: 'WebhookSubscriptionStatus',
        enabledAt: 'DateTime',
    },
    WebhookSubscriptionKpi: {
        totalHits: 'Int',
        errorRate: 'Float',
    },
    WebhookSubscriptionNotFoundRejection: {
        message: 'String',
    },
    WebhookSubscriptionPayload: {
        '...on WebhookSubscriptionSuccessPayload': 'WebhookSubscriptionSuccessPayload',
        '...on WebhookSubscriptionNotFoundRejection': 'WebhookSubscriptionNotFoundRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on InvalidArgumentRejection': 'InvalidArgumentRejection',
    },
    WebhookSubscriptionStatusInfo: {
        '...on WebhookSubscriptionBrokenStatusInfo': 'WebhookSubscriptionBrokenStatusInfo',
        '...on WebhookSubscriptionDisabledStatusInfo': 'WebhookSubscriptionDisabledStatusInfo',
        '...on WebhookSubscriptionEnabledStatusInfo': 'WebhookSubscriptionEnabledStatusInfo',
        status: 'WebhookSubscriptionStatus',
    },
    WebhookSubscriptionSuccessPayload: {
        webhookSubscription: 'WebhookSubscription',
    },
    WebhookUnsubscribePayload: {
        '...on WebhookUnsubscribeSuccessPayload': 'WebhookUnsubscribeSuccessPayload',
        '...on WebhookSubscriptionNotFoundRejection': 'WebhookSubscriptionNotFoundRejection',
        '...on InternalErrorRejection': 'InternalErrorRejection',
        '...on InvalidArgumentRejection': 'InvalidArgumentRejection',
    },
    WebhookUnsubscribeSuccessPayload: {
        unsubscribed: 'Boolean',
    },
    WrongValueProvidedRejection: {
        message: 'String',
        valueProvided: 'String',
        parameterName: 'String',
    },
};
exports.Ops = {
    query: 'Query',
    mutation: 'Mutation',
};
